//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RozliczenieSamochodów {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RozliczenieSamochodówDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RozliczenieSamochodówDataSet : global::System.Data.DataSet {
        
        private FakturaDataTable tableFaktura;
        
        private Miesięczna_Karta_DrogowaDataTable tableMiesięczna_Karta_Drogowa;
        
        private Pozycje_fakturyDataTable tablePozycje_faktury;
        
        private PrzejazdDataTable tablePrzejazd;
        
        private SamochodyDataTable tableSamochody;
        
        private UżytkownicyDataTable tableUżytkownicy;
        
        private global::System.Data.DataRelation relationFK_96;
        
        private global::System.Data.DataRelation relationFK_99;
        
        private global::System.Data.DataRelation relationFK_115;
        
        private global::System.Data.DataRelation relationFK_118;
        
        private global::System.Data.DataRelation relationFK_157;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public RozliczenieSamochodówDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected RozliczenieSamochodówDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Faktura"] != null)) {
                    base.Tables.Add(new FakturaDataTable(ds.Tables["Faktura"]));
                }
                if ((ds.Tables["Miesięczna Karta Drogowa"] != null)) {
                    base.Tables.Add(new Miesięczna_Karta_DrogowaDataTable(ds.Tables["Miesięczna Karta Drogowa"]));
                }
                if ((ds.Tables["Pozycje faktury"] != null)) {
                    base.Tables.Add(new Pozycje_fakturyDataTable(ds.Tables["Pozycje faktury"]));
                }
                if ((ds.Tables["Przejazd"] != null)) {
                    base.Tables.Add(new PrzejazdDataTable(ds.Tables["Przejazd"]));
                }
                if ((ds.Tables["Samochody"] != null)) {
                    base.Tables.Add(new SamochodyDataTable(ds.Tables["Samochody"]));
                }
                if ((ds.Tables["Użytkownicy"] != null)) {
                    base.Tables.Add(new UżytkownicyDataTable(ds.Tables["Użytkownicy"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FakturaDataTable Faktura {
            get {
                return this.tableFaktura;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Miesięczna_Karta_DrogowaDataTable Miesięczna_Karta_Drogowa {
            get {
                return this.tableMiesięczna_Karta_Drogowa;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Pozycje_fakturyDataTable Pozycje_faktury {
            get {
                return this.tablePozycje_faktury;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrzejazdDataTable Przejazd {
            get {
                return this.tablePrzejazd;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SamochodyDataTable Samochody {
            get {
                return this.tableSamochody;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UżytkownicyDataTable Użytkownicy {
            get {
                return this.tableUżytkownicy;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            RozliczenieSamochodówDataSet cln = ((RozliczenieSamochodówDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Faktura"] != null)) {
                    base.Tables.Add(new FakturaDataTable(ds.Tables["Faktura"]));
                }
                if ((ds.Tables["Miesięczna Karta Drogowa"] != null)) {
                    base.Tables.Add(new Miesięczna_Karta_DrogowaDataTable(ds.Tables["Miesięczna Karta Drogowa"]));
                }
                if ((ds.Tables["Pozycje faktury"] != null)) {
                    base.Tables.Add(new Pozycje_fakturyDataTable(ds.Tables["Pozycje faktury"]));
                }
                if ((ds.Tables["Przejazd"] != null)) {
                    base.Tables.Add(new PrzejazdDataTable(ds.Tables["Przejazd"]));
                }
                if ((ds.Tables["Samochody"] != null)) {
                    base.Tables.Add(new SamochodyDataTable(ds.Tables["Samochody"]));
                }
                if ((ds.Tables["Użytkownicy"] != null)) {
                    base.Tables.Add(new UżytkownicyDataTable(ds.Tables["Użytkownicy"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableFaktura = ((FakturaDataTable)(base.Tables["Faktura"]));
            if ((initTable == true)) {
                if ((this.tableFaktura != null)) {
                    this.tableFaktura.InitVars();
                }
            }
            this.tableMiesięczna_Karta_Drogowa = ((Miesięczna_Karta_DrogowaDataTable)(base.Tables["Miesięczna Karta Drogowa"]));
            if ((initTable == true)) {
                if ((this.tableMiesięczna_Karta_Drogowa != null)) {
                    this.tableMiesięczna_Karta_Drogowa.InitVars();
                }
            }
            this.tablePozycje_faktury = ((Pozycje_fakturyDataTable)(base.Tables["Pozycje faktury"]));
            if ((initTable == true)) {
                if ((this.tablePozycje_faktury != null)) {
                    this.tablePozycje_faktury.InitVars();
                }
            }
            this.tablePrzejazd = ((PrzejazdDataTable)(base.Tables["Przejazd"]));
            if ((initTable == true)) {
                if ((this.tablePrzejazd != null)) {
                    this.tablePrzejazd.InitVars();
                }
            }
            this.tableSamochody = ((SamochodyDataTable)(base.Tables["Samochody"]));
            if ((initTable == true)) {
                if ((this.tableSamochody != null)) {
                    this.tableSamochody.InitVars();
                }
            }
            this.tableUżytkownicy = ((UżytkownicyDataTable)(base.Tables["Użytkownicy"]));
            if ((initTable == true)) {
                if ((this.tableUżytkownicy != null)) {
                    this.tableUżytkownicy.InitVars();
                }
            }
            this.relationFK_96 = this.Relations["FK_96"];
            this.relationFK_99 = this.Relations["FK_99"];
            this.relationFK_115 = this.Relations["FK_115"];
            this.relationFK_118 = this.Relations["FK_118"];
            this.relationFK_157 = this.Relations["FK_157"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitClass() {
            this.DataSetName = "RozliczenieSamochodówDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RozliczenieSamochodówDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFaktura = new FakturaDataTable();
            base.Tables.Add(this.tableFaktura);
            this.tableMiesięczna_Karta_Drogowa = new Miesięczna_Karta_DrogowaDataTable();
            base.Tables.Add(this.tableMiesięczna_Karta_Drogowa);
            this.tablePozycje_faktury = new Pozycje_fakturyDataTable();
            base.Tables.Add(this.tablePozycje_faktury);
            this.tablePrzejazd = new PrzejazdDataTable();
            base.Tables.Add(this.tablePrzejazd);
            this.tableSamochody = new SamochodyDataTable();
            base.Tables.Add(this.tableSamochody);
            this.tableUżytkownicy = new UżytkownicyDataTable();
            base.Tables.Add(this.tableUżytkownicy);
            this.relationFK_96 = new global::System.Data.DataRelation("FK_96", new global::System.Data.DataColumn[] {
                        this.tableSamochody.Nr_rejestracyjnyColumn}, new global::System.Data.DataColumn[] {
                        this.tableMiesięczna_Karta_Drogowa.Nr_rejestracyjnyColumn}, false);
            this.Relations.Add(this.relationFK_96);
            this.relationFK_99 = new global::System.Data.DataRelation("FK_99", new global::System.Data.DataColumn[] {
                        this.tableFaktura.Id_fakturyColumn}, new global::System.Data.DataColumn[] {
                        this.tablePozycje_faktury.Id_fakturyColumn}, false);
            this.Relations.Add(this.relationFK_99);
            this.relationFK_115 = new global::System.Data.DataRelation("FK_115", new global::System.Data.DataColumn[] {
                        this.tableUżytkownicy.Id_pracownikaColumn}, new global::System.Data.DataColumn[] {
                        this.tablePrzejazd.Id_pracownikaColumn}, false);
            this.Relations.Add(this.relationFK_115);
            this.relationFK_118 = new global::System.Data.DataRelation("FK_118", new global::System.Data.DataColumn[] {
                        this.tableFaktura.Id_fakturyColumn}, new global::System.Data.DataColumn[] {
                        this.tablePrzejazd.Id_fakturyColumn}, false);
            this.Relations.Add(this.relationFK_118);
            this.relationFK_157 = new global::System.Data.DataRelation("FK_157", new global::System.Data.DataColumn[] {
                        this.tableMiesięczna_Karta_Drogowa.MiesiącColumn,
                        this.tableMiesięczna_Karta_Drogowa.RokColumn,
                        this.tableMiesięczna_Karta_Drogowa.Nr_rejestracyjnyColumn}, new global::System.Data.DataColumn[] {
                        this.tablePrzejazd.MiesiącColumn,
                        this.tablePrzejazd.RokColumn,
                        this.tablePrzejazd.Nr_rejestracyjnyColumn}, false);
            this.Relations.Add(this.relationFK_157);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeFaktura() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeMiesięczna_Karta_Drogowa() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializePozycje_faktury() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializePrzejazd() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeSamochody() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeUżytkownicy() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RozliczenieSamochodówDataSet ds = new RozliczenieSamochodówDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void FakturaRowChangeEventHandler(object sender, FakturaRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Miesięczna_Karta_DrogowaRowChangeEventHandler(object sender, Miesięczna_Karta_DrogowaRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Pozycje_fakturyRowChangeEventHandler(object sender, Pozycje_fakturyRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void PrzejazdRowChangeEventHandler(object sender, PrzejazdRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void SamochodyRowChangeEventHandler(object sender, SamochodyRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void UżytkownicyRowChangeEventHandler(object sender, UżytkownicyRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FakturaDataTable : global::System.Data.TypedTableBase<FakturaRow> {
            
            private global::System.Data.DataColumn columnId_faktury;
            
            private global::System.Data.DataColumn columnSprzedawca;
            
            private global::System.Data.DataColumn columnNabywca;
            
            private global::System.Data.DataColumn columnSuma;
            
            private global::System.Data.DataColumn columnDzień_wystawienia;
            
            private global::System.Data.DataColumn columnMiesiąc_wystawienia;
            
            private global::System.Data.DataColumn columnRok_wystawienia;
            
            private global::System.Data.DataColumn columnDzień_Sprzedaży;
            
            private global::System.Data.DataColumn columnMiesiąc_Sprzedaży;
            
            private global::System.Data.DataColumn columnRok_Sprzedaży;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FakturaDataTable() {
                this.TableName = "Faktura";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal FakturaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected FakturaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Id_fakturyColumn {
                get {
                    return this.columnId_faktury;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SprzedawcaColumn {
                get {
                    return this.columnSprzedawca;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn NabywcaColumn {
                get {
                    return this.columnNabywca;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SumaColumn {
                get {
                    return this.columnSuma;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Dzień_wystawieniaColumn {
                get {
                    return this.columnDzień_wystawienia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Miesiąc_wystawieniaColumn {
                get {
                    return this.columnMiesiąc_wystawienia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Rok_wystawieniaColumn {
                get {
                    return this.columnRok_wystawienia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Dzień_SprzedażyColumn {
                get {
                    return this.columnDzień_Sprzedaży;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Miesiąc_SprzedażyColumn {
                get {
                    return this.columnMiesiąc_Sprzedaży;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Rok_SprzedażyColumn {
                get {
                    return this.columnRok_Sprzedaży;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FakturaRow this[int index] {
                get {
                    return ((FakturaRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FakturaRowChangeEventHandler FakturaRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FakturaRowChangeEventHandler FakturaRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FakturaRowChangeEventHandler FakturaRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FakturaRowChangeEventHandler FakturaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddFakturaRow(FakturaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FakturaRow AddFakturaRow(int Id_faktury, string Sprzedawca, string Nabywca, decimal Suma, int Dzień_wystawienia, int Miesiąc_wystawienia, int Rok_wystawienia, int Dzień_Sprzedaży, int Miesiąc_Sprzedaży, int Rok_Sprzedaży) {
                FakturaRow rowFakturaRow = ((FakturaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id_faktury,
                        Sprzedawca,
                        Nabywca,
                        Suma,
                        Dzień_wystawienia,
                        Miesiąc_wystawienia,
                        Rok_wystawienia,
                        Dzień_Sprzedaży,
                        Miesiąc_Sprzedaży,
                        Rok_Sprzedaży};
                rowFakturaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFakturaRow);
                return rowFakturaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FakturaRow FindById_faktury(int Id_faktury) {
                return ((FakturaRow)(this.Rows.Find(new object[] {
                            Id_faktury})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                FakturaDataTable cln = ((FakturaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FakturaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnId_faktury = base.Columns["Id faktury"];
                this.columnSprzedawca = base.Columns["Sprzedawca"];
                this.columnNabywca = base.Columns["Nabywca"];
                this.columnSuma = base.Columns["Suma"];
                this.columnDzień_wystawienia = base.Columns["Dzień wystawienia"];
                this.columnMiesiąc_wystawienia = base.Columns["Miesiąc wystawienia"];
                this.columnRok_wystawienia = base.Columns["Rok wystawienia"];
                this.columnDzień_Sprzedaży = base.Columns["Dzień Sprzedaży"];
                this.columnMiesiąc_Sprzedaży = base.Columns["Miesiąc Sprzedaży"];
                this.columnRok_Sprzedaży = base.Columns["Rok Sprzedaży"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnId_faktury = new global::System.Data.DataColumn("Id faktury", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId_faktury);
                this.columnSprzedawca = new global::System.Data.DataColumn("Sprzedawca", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSprzedawca);
                this.columnNabywca = new global::System.Data.DataColumn("Nabywca", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNabywca);
                this.columnSuma = new global::System.Data.DataColumn("Suma", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuma);
                this.columnDzień_wystawienia = new global::System.Data.DataColumn("Dzień wystawienia", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDzień_wystawienia);
                this.columnMiesiąc_wystawienia = new global::System.Data.DataColumn("Miesiąc wystawienia", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiesiąc_wystawienia);
                this.columnRok_wystawienia = new global::System.Data.DataColumn("Rok wystawienia", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRok_wystawienia);
                this.columnDzień_Sprzedaży = new global::System.Data.DataColumn("Dzień Sprzedaży", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDzień_Sprzedaży);
                this.columnMiesiąc_Sprzedaży = new global::System.Data.DataColumn("Miesiąc Sprzedaży", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiesiąc_Sprzedaży);
                this.columnRok_Sprzedaży = new global::System.Data.DataColumn("Rok Sprzedaży", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRok_Sprzedaży);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId_faktury}, true));
                this.columnId_faktury.AllowDBNull = false;
                this.columnId_faktury.Unique = true;
                this.columnSprzedawca.AllowDBNull = false;
                this.columnSprzedawca.MaxLength = 50;
                this.columnNabywca.AllowDBNull = false;
                this.columnNabywca.MaxLength = 50;
                this.columnSuma.AllowDBNull = false;
                this.columnDzień_wystawienia.AllowDBNull = false;
                this.columnMiesiąc_wystawienia.AllowDBNull = false;
                this.columnRok_wystawienia.AllowDBNull = false;
                this.columnDzień_Sprzedaży.AllowDBNull = false;
                this.columnMiesiąc_Sprzedaży.AllowDBNull = false;
                this.columnRok_Sprzedaży.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FakturaRow NewFakturaRow() {
                return ((FakturaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FakturaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(FakturaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FakturaRowChanged != null)) {
                    this.FakturaRowChanged(this, new FakturaRowChangeEvent(((FakturaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FakturaRowChanging != null)) {
                    this.FakturaRowChanging(this, new FakturaRowChangeEvent(((FakturaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FakturaRowDeleted != null)) {
                    this.FakturaRowDeleted(this, new FakturaRowChangeEvent(((FakturaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FakturaRowDeleting != null)) {
                    this.FakturaRowDeleting(this, new FakturaRowChangeEvent(((FakturaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveFakturaRow(FakturaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RozliczenieSamochodówDataSet ds = new RozliczenieSamochodówDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FakturaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Miesięczna_Karta_DrogowaDataTable : global::System.Data.TypedTableBase<Miesięczna_Karta_DrogowaRow> {
            
            private global::System.Data.DataColumn columnMiesiąc;
            
            private global::System.Data.DataColumn columnRok;
            
            private global::System.Data.DataColumn columnNr_rejestracyjny;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Miesięczna_Karta_DrogowaDataTable() {
                this.TableName = "Miesięczna Karta Drogowa";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Miesięczna_Karta_DrogowaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Miesięczna_Karta_DrogowaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MiesiącColumn {
                get {
                    return this.columnMiesiąc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn RokColumn {
                get {
                    return this.columnRok;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Nr_rejestracyjnyColumn {
                get {
                    return this.columnNr_rejestracyjny;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Miesięczna_Karta_DrogowaRow this[int index] {
                get {
                    return ((Miesięczna_Karta_DrogowaRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Miesięczna_Karta_DrogowaRowChangeEventHandler Miesięczna_Karta_DrogowaRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Miesięczna_Karta_DrogowaRowChangeEventHandler Miesięczna_Karta_DrogowaRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Miesięczna_Karta_DrogowaRowChangeEventHandler Miesięczna_Karta_DrogowaRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Miesięczna_Karta_DrogowaRowChangeEventHandler Miesięczna_Karta_DrogowaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddMiesięczna_Karta_DrogowaRow(Miesięczna_Karta_DrogowaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Miesięczna_Karta_DrogowaRow AddMiesięczna_Karta_DrogowaRow(int Miesiąc, int Rok, SamochodyRow parentSamochodyRowByFK_96) {
                Miesięczna_Karta_DrogowaRow rowMiesięczna_Karta_DrogowaRow = ((Miesięczna_Karta_DrogowaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Miesiąc,
                        Rok,
                        null};
                if ((parentSamochodyRowByFK_96 != null)) {
                    columnValuesArray[2] = parentSamochodyRowByFK_96[0];
                }
                rowMiesięczna_Karta_DrogowaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMiesięczna_Karta_DrogowaRow);
                return rowMiesięczna_Karta_DrogowaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Miesięczna_Karta_DrogowaRow FindByMiesiącRokNr_rejestracyjny(int Miesiąc, int Rok, string Nr_rejestracyjny) {
                return ((Miesięczna_Karta_DrogowaRow)(this.Rows.Find(new object[] {
                            Miesiąc,
                            Rok,
                            Nr_rejestracyjny})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Miesięczna_Karta_DrogowaDataTable cln = ((Miesięczna_Karta_DrogowaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Miesięczna_Karta_DrogowaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnMiesiąc = base.Columns["Miesiąc"];
                this.columnRok = base.Columns["Rok"];
                this.columnNr_rejestracyjny = base.Columns["Nr rejestracyjny"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnMiesiąc = new global::System.Data.DataColumn("Miesiąc", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiesiąc);
                this.columnRok = new global::System.Data.DataColumn("Rok", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRok);
                this.columnNr_rejestracyjny = new global::System.Data.DataColumn("Nr rejestracyjny", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNr_rejestracyjny);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMiesiąc,
                                this.columnRok,
                                this.columnNr_rejestracyjny}, true));
                this.columnMiesiąc.AllowDBNull = false;
                this.columnRok.AllowDBNull = false;
                this.columnNr_rejestracyjny.AllowDBNull = false;
                this.columnNr_rejestracyjny.MaxLength = 8;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Miesięczna_Karta_DrogowaRow NewMiesięczna_Karta_DrogowaRow() {
                return ((Miesięczna_Karta_DrogowaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Miesięczna_Karta_DrogowaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Miesięczna_Karta_DrogowaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Miesięczna_Karta_DrogowaRowChanged != null)) {
                    this.Miesięczna_Karta_DrogowaRowChanged(this, new Miesięczna_Karta_DrogowaRowChangeEvent(((Miesięczna_Karta_DrogowaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Miesięczna_Karta_DrogowaRowChanging != null)) {
                    this.Miesięczna_Karta_DrogowaRowChanging(this, new Miesięczna_Karta_DrogowaRowChangeEvent(((Miesięczna_Karta_DrogowaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Miesięczna_Karta_DrogowaRowDeleted != null)) {
                    this.Miesięczna_Karta_DrogowaRowDeleted(this, new Miesięczna_Karta_DrogowaRowChangeEvent(((Miesięczna_Karta_DrogowaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Miesięczna_Karta_DrogowaRowDeleting != null)) {
                    this.Miesięczna_Karta_DrogowaRowDeleting(this, new Miesięczna_Karta_DrogowaRowChangeEvent(((Miesięczna_Karta_DrogowaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveMiesięczna_Karta_DrogowaRow(Miesięczna_Karta_DrogowaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RozliczenieSamochodówDataSet ds = new RozliczenieSamochodówDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Miesięczna_Karta_DrogowaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Pozycje_fakturyDataTable : global::System.Data.TypedTableBase<Pozycje_fakturyRow> {
            
            private global::System.Data.DataColumn columnId_pozycji;
            
            private global::System.Data.DataColumn columnId_faktury;
            
            private global::System.Data.DataColumn columnNazwa;
            
            private global::System.Data.DataColumn columnIlość;
            
            private global::System.Data.DataColumn columnCena_jednostkowa_brutto;
            
            private global::System.Data.DataColumn columnWartość_netto;
            
            private global::System.Data.DataColumn columnStawka;
            
            private global::System.Data.DataColumn columnPodatek;
            
            private global::System.Data.DataColumn columnWartość_brutto;
            
            private global::System.Data.DataColumn columnSuma;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Pozycje_fakturyDataTable() {
                this.TableName = "Pozycje faktury";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Pozycje_fakturyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Pozycje_fakturyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Id_pozycjiColumn {
                get {
                    return this.columnId_pozycji;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Id_fakturyColumn {
                get {
                    return this.columnId_faktury;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn NazwaColumn {
                get {
                    return this.columnNazwa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn IlośćColumn {
                get {
                    return this.columnIlość;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Cena_jednostkowa_bruttoColumn {
                get {
                    return this.columnCena_jednostkowa_brutto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Wartość_nettoColumn {
                get {
                    return this.columnWartość_netto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn StawkaColumn {
                get {
                    return this.columnStawka;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PodatekColumn {
                get {
                    return this.columnPodatek;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Wartość_bruttoColumn {
                get {
                    return this.columnWartość_brutto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SumaColumn {
                get {
                    return this.columnSuma;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Pozycje_fakturyRow this[int index] {
                get {
                    return ((Pozycje_fakturyRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Pozycje_fakturyRowChangeEventHandler Pozycje_fakturyRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Pozycje_fakturyRowChangeEventHandler Pozycje_fakturyRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Pozycje_fakturyRowChangeEventHandler Pozycje_fakturyRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Pozycje_fakturyRowChangeEventHandler Pozycje_fakturyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddPozycje_fakturyRow(Pozycje_fakturyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Pozycje_fakturyRow AddPozycje_fakturyRow(int Id_pozycji, FakturaRow parentFakturaRowByFK_99, string Nazwa, int Ilość, decimal Cena_jednostkowa_brutto, decimal Wartość_netto, int Stawka, decimal Podatek, decimal Wartość_brutto, decimal Suma) {
                Pozycje_fakturyRow rowPozycje_fakturyRow = ((Pozycje_fakturyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id_pozycji,
                        null,
                        Nazwa,
                        Ilość,
                        Cena_jednostkowa_brutto,
                        Wartość_netto,
                        Stawka,
                        Podatek,
                        Wartość_brutto,
                        Suma};
                if ((parentFakturaRowByFK_99 != null)) {
                    columnValuesArray[1] = parentFakturaRowByFK_99[0];
                }
                rowPozycje_fakturyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPozycje_fakturyRow);
                return rowPozycje_fakturyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Pozycje_fakturyRow FindById_pozycji(int Id_pozycji) {
                return ((Pozycje_fakturyRow)(this.Rows.Find(new object[] {
                            Id_pozycji})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Pozycje_fakturyDataTable cln = ((Pozycje_fakturyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Pozycje_fakturyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnId_pozycji = base.Columns["Id pozycji"];
                this.columnId_faktury = base.Columns["Id faktury"];
                this.columnNazwa = base.Columns["Nazwa"];
                this.columnIlość = base.Columns["Ilość"];
                this.columnCena_jednostkowa_brutto = base.Columns["Cena jednostkowa brutto"];
                this.columnWartość_netto = base.Columns["Wartość netto"];
                this.columnStawka = base.Columns["Stawka"];
                this.columnPodatek = base.Columns["Podatek"];
                this.columnWartość_brutto = base.Columns["Wartość brutto"];
                this.columnSuma = base.Columns["Suma"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnId_pozycji = new global::System.Data.DataColumn("Id pozycji", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId_pozycji);
                this.columnId_faktury = new global::System.Data.DataColumn("Id faktury", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId_faktury);
                this.columnNazwa = new global::System.Data.DataColumn("Nazwa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNazwa);
                this.columnIlość = new global::System.Data.DataColumn("Ilość", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIlość);
                this.columnCena_jednostkowa_brutto = new global::System.Data.DataColumn("Cena jednostkowa brutto", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCena_jednostkowa_brutto);
                this.columnWartość_netto = new global::System.Data.DataColumn("Wartość netto", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWartość_netto);
                this.columnStawka = new global::System.Data.DataColumn("Stawka", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStawka);
                this.columnPodatek = new global::System.Data.DataColumn("Podatek", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPodatek);
                this.columnWartość_brutto = new global::System.Data.DataColumn("Wartość brutto", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWartość_brutto);
                this.columnSuma = new global::System.Data.DataColumn("Suma", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuma);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId_pozycji}, true));
                this.columnId_pozycji.AllowDBNull = false;
                this.columnId_pozycji.Unique = true;
                this.columnId_faktury.AllowDBNull = false;
                this.columnNazwa.AllowDBNull = false;
                this.columnNazwa.MaxLength = 50;
                this.columnIlość.AllowDBNull = false;
                this.columnCena_jednostkowa_brutto.AllowDBNull = false;
                this.columnWartość_netto.AllowDBNull = false;
                this.columnStawka.AllowDBNull = false;
                this.columnPodatek.AllowDBNull = false;
                this.columnWartość_brutto.AllowDBNull = false;
                this.columnSuma.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Pozycje_fakturyRow NewPozycje_fakturyRow() {
                return ((Pozycje_fakturyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Pozycje_fakturyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Pozycje_fakturyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Pozycje_fakturyRowChanged != null)) {
                    this.Pozycje_fakturyRowChanged(this, new Pozycje_fakturyRowChangeEvent(((Pozycje_fakturyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Pozycje_fakturyRowChanging != null)) {
                    this.Pozycje_fakturyRowChanging(this, new Pozycje_fakturyRowChangeEvent(((Pozycje_fakturyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Pozycje_fakturyRowDeleted != null)) {
                    this.Pozycje_fakturyRowDeleted(this, new Pozycje_fakturyRowChangeEvent(((Pozycje_fakturyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Pozycje_fakturyRowDeleting != null)) {
                    this.Pozycje_fakturyRowDeleting(this, new Pozycje_fakturyRowChangeEvent(((Pozycje_fakturyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemovePozycje_fakturyRow(Pozycje_fakturyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RozliczenieSamochodówDataSet ds = new RozliczenieSamochodówDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Pozycje_fakturyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrzejazdDataTable : global::System.Data.TypedTableBase<PrzejazdRow> {
            
            private global::System.Data.DataColumn columnId_przejazdu;
            
            private global::System.Data.DataColumn columnDzień_Miesiąca;
            
            private global::System.Data.DataColumn columnCel_wyjazdu;
            
            private global::System.Data.DataColumn columnTrasa;
            
            private global::System.Data.DataColumn columnStan_licznika_przy_wyjeździe;
            
            private global::System.Data.DataColumn columnStan_licznika_po_powrocie;
            
            private global::System.Data.DataColumn columnIlość_przejechanych_km_;
            
            private global::System.Data.DataColumn columnId_pracownika;
            
            private global::System.Data.DataColumn columnId_faktury;
            
            private global::System.Data.DataColumn columnMiesiąc;
            
            private global::System.Data.DataColumn columnRok;
            
            private global::System.Data.DataColumn columnNr_rejestracyjny;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PrzejazdDataTable() {
                this.TableName = "Przejazd";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal PrzejazdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected PrzejazdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Id_przejazduColumn {
                get {
                    return this.columnId_przejazdu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Dzień_MiesiącaColumn {
                get {
                    return this.columnDzień_Miesiąca;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Cel_wyjazduColumn {
                get {
                    return this.columnCel_wyjazdu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TrasaColumn {
                get {
                    return this.columnTrasa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Stan_licznika_przy_wyjeździeColumn {
                get {
                    return this.columnStan_licznika_przy_wyjeździe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Stan_licznika_po_powrocieColumn {
                get {
                    return this.columnStan_licznika_po_powrocie;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Ilość_przejechanych_km_Column {
                get {
                    return this.columnIlość_przejechanych_km_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Id_pracownikaColumn {
                get {
                    return this.columnId_pracownika;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Id_fakturyColumn {
                get {
                    return this.columnId_faktury;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MiesiącColumn {
                get {
                    return this.columnMiesiąc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn RokColumn {
                get {
                    return this.columnRok;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Nr_rejestracyjnyColumn {
                get {
                    return this.columnNr_rejestracyjny;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PrzejazdRow this[int index] {
                get {
                    return ((PrzejazdRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PrzejazdRowChangeEventHandler PrzejazdRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PrzejazdRowChangeEventHandler PrzejazdRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PrzejazdRowChangeEventHandler PrzejazdRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PrzejazdRowChangeEventHandler PrzejazdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddPrzejazdRow(PrzejazdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PrzejazdRow AddPrzejazdRow(int Id_przejazdu, int Dzień_Miesiąca, string Cel_wyjazdu, string Trasa, int Stan_licznika_przy_wyjeździe, int Stan_licznika_po_powrocie, int Ilość_przejechanych_km_, UżytkownicyRow parentUżytkownicyRowByFK_115, FakturaRow parentFakturaRowByFK_118, int Miesiąc, int Rok, string Nr_rejestracyjny) {
                PrzejazdRow rowPrzejazdRow = ((PrzejazdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id_przejazdu,
                        Dzień_Miesiąca,
                        Cel_wyjazdu,
                        Trasa,
                        Stan_licznika_przy_wyjeździe,
                        Stan_licznika_po_powrocie,
                        Ilość_przejechanych_km_,
                        null,
                        null,
                        Miesiąc,
                        Rok,
                        Nr_rejestracyjny};
                if ((parentUżytkownicyRowByFK_115 != null)) {
                    columnValuesArray[7] = parentUżytkownicyRowByFK_115[0];
                }
                if ((parentFakturaRowByFK_118 != null)) {
                    columnValuesArray[8] = parentFakturaRowByFK_118[0];
                }
                rowPrzejazdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrzejazdRow);
                return rowPrzejazdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PrzejazdRow FindById_przejazdu(int Id_przejazdu) {
                return ((PrzejazdRow)(this.Rows.Find(new object[] {
                            Id_przejazdu})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                PrzejazdDataTable cln = ((PrzejazdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrzejazdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnId_przejazdu = base.Columns["Id przejazdu"];
                this.columnDzień_Miesiąca = base.Columns["Dzień Miesiąca"];
                this.columnCel_wyjazdu = base.Columns["Cel wyjazdu"];
                this.columnTrasa = base.Columns["Trasa"];
                this.columnStan_licznika_przy_wyjeździe = base.Columns["Stan licznika przy wyjeździe"];
                this.columnStan_licznika_po_powrocie = base.Columns["Stan licznika po powrocie"];
                this.columnIlość_przejechanych_km_ = base.Columns["Ilość przejechanych km_"];
                this.columnId_pracownika = base.Columns["Id pracownika"];
                this.columnId_faktury = base.Columns["Id faktury"];
                this.columnMiesiąc = base.Columns["Miesiąc"];
                this.columnRok = base.Columns["Rok"];
                this.columnNr_rejestracyjny = base.Columns["Nr rejestracyjny"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnId_przejazdu = new global::System.Data.DataColumn("Id przejazdu", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId_przejazdu);
                this.columnDzień_Miesiąca = new global::System.Data.DataColumn("Dzień Miesiąca", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDzień_Miesiąca);
                this.columnCel_wyjazdu = new global::System.Data.DataColumn("Cel wyjazdu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCel_wyjazdu);
                this.columnTrasa = new global::System.Data.DataColumn("Trasa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrasa);
                this.columnStan_licznika_przy_wyjeździe = new global::System.Data.DataColumn("Stan licznika przy wyjeździe", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStan_licznika_przy_wyjeździe);
                this.columnStan_licznika_po_powrocie = new global::System.Data.DataColumn("Stan licznika po powrocie", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStan_licznika_po_powrocie);
                this.columnIlość_przejechanych_km_ = new global::System.Data.DataColumn("Ilość przejechanych km_", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIlość_przejechanych_km_);
                this.columnId_pracownika = new global::System.Data.DataColumn("Id pracownika", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId_pracownika);
                this.columnId_faktury = new global::System.Data.DataColumn("Id faktury", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId_faktury);
                this.columnMiesiąc = new global::System.Data.DataColumn("Miesiąc", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiesiąc);
                this.columnRok = new global::System.Data.DataColumn("Rok", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRok);
                this.columnNr_rejestracyjny = new global::System.Data.DataColumn("Nr rejestracyjny", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNr_rejestracyjny);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId_przejazdu}, true));
                this.columnId_przejazdu.AllowDBNull = false;
                this.columnId_przejazdu.Unique = true;
                this.columnDzień_Miesiąca.AllowDBNull = false;
                this.columnCel_wyjazdu.AllowDBNull = false;
                this.columnCel_wyjazdu.MaxLength = 50;
                this.columnTrasa.AllowDBNull = false;
                this.columnTrasa.MaxLength = 50;
                this.columnStan_licznika_przy_wyjeździe.AllowDBNull = false;
                this.columnStan_licznika_po_powrocie.AllowDBNull = false;
                this.columnIlość_przejechanych_km_.AllowDBNull = false;
                this.columnId_pracownika.AllowDBNull = false;
                this.columnMiesiąc.AllowDBNull = false;
                this.columnRok.AllowDBNull = false;
                this.columnNr_rejestracyjny.AllowDBNull = false;
                this.columnNr_rejestracyjny.MaxLength = 8;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PrzejazdRow NewPrzejazdRow() {
                return ((PrzejazdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrzejazdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(PrzejazdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrzejazdRowChanged != null)) {
                    this.PrzejazdRowChanged(this, new PrzejazdRowChangeEvent(((PrzejazdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrzejazdRowChanging != null)) {
                    this.PrzejazdRowChanging(this, new PrzejazdRowChangeEvent(((PrzejazdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrzejazdRowDeleted != null)) {
                    this.PrzejazdRowDeleted(this, new PrzejazdRowChangeEvent(((PrzejazdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrzejazdRowDeleting != null)) {
                    this.PrzejazdRowDeleting(this, new PrzejazdRowChangeEvent(((PrzejazdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemovePrzejazdRow(PrzejazdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RozliczenieSamochodówDataSet ds = new RozliczenieSamochodówDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrzejazdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SamochodyDataTable : global::System.Data.TypedTableBase<SamochodyRow> {
            
            private global::System.Data.DataColumn columnNr_rejestracyjny;
            
            private global::System.Data.DataColumn columnTyp;
            
            private global::System.Data.DataColumn columnMarka;
            
            private global::System.Data.DataColumn columnModel;
            
            private global::System.Data.DataColumn columnWłasność;
            
            private global::System.Data.DataColumn columnPaliwo;
            
            private global::System.Data.DataColumn columnPojemność;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SamochodyDataTable() {
                this.TableName = "Samochody";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SamochodyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected SamochodyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Nr_rejestracyjnyColumn {
                get {
                    return this.columnNr_rejestracyjny;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TypColumn {
                get {
                    return this.columnTyp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MarkaColumn {
                get {
                    return this.columnMarka;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ModelColumn {
                get {
                    return this.columnModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn WłasnośćColumn {
                get {
                    return this.columnWłasność;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PaliwoColumn {
                get {
                    return this.columnPaliwo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PojemnośćColumn {
                get {
                    return this.columnPojemność;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SamochodyRow this[int index] {
                get {
                    return ((SamochodyRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SamochodyRowChangeEventHandler SamochodyRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SamochodyRowChangeEventHandler SamochodyRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SamochodyRowChangeEventHandler SamochodyRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SamochodyRowChangeEventHandler SamochodyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddSamochodyRow(SamochodyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SamochodyRow AddSamochodyRow(string Nr_rejestracyjny, string Typ, string Marka, string Model, string Własność, string Paliwo, decimal Pojemność) {
                SamochodyRow rowSamochodyRow = ((SamochodyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Nr_rejestracyjny,
                        Typ,
                        Marka,
                        Model,
                        Własność,
                        Paliwo,
                        Pojemność};
                rowSamochodyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSamochodyRow);
                return rowSamochodyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SamochodyRow FindByNr_rejestracyjny(string Nr_rejestracyjny) {
                return ((SamochodyRow)(this.Rows.Find(new object[] {
                            Nr_rejestracyjny})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SamochodyDataTable cln = ((SamochodyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SamochodyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnNr_rejestracyjny = base.Columns["Nr rejestracyjny"];
                this.columnTyp = base.Columns["Typ"];
                this.columnMarka = base.Columns["Marka"];
                this.columnModel = base.Columns["Model"];
                this.columnWłasność = base.Columns["Własność"];
                this.columnPaliwo = base.Columns["Paliwo"];
                this.columnPojemność = base.Columns["Pojemność"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnNr_rejestracyjny = new global::System.Data.DataColumn("Nr rejestracyjny", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNr_rejestracyjny);
                this.columnTyp = new global::System.Data.DataColumn("Typ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTyp);
                this.columnMarka = new global::System.Data.DataColumn("Marka", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarka);
                this.columnModel = new global::System.Data.DataColumn("Model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModel);
                this.columnWłasność = new global::System.Data.DataColumn("Własność", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWłasność);
                this.columnPaliwo = new global::System.Data.DataColumn("Paliwo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaliwo);
                this.columnPojemność = new global::System.Data.DataColumn("Pojemność", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPojemność);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNr_rejestracyjny}, true));
                this.columnNr_rejestracyjny.AllowDBNull = false;
                this.columnNr_rejestracyjny.Unique = true;
                this.columnNr_rejestracyjny.MaxLength = 8;
                this.columnTyp.AllowDBNull = false;
                this.columnTyp.MaxLength = 50;
                this.columnMarka.AllowDBNull = false;
                this.columnMarka.MaxLength = 50;
                this.columnModel.AllowDBNull = false;
                this.columnModel.MaxLength = 50;
                this.columnWłasność.AllowDBNull = false;
                this.columnWłasność.MaxLength = 50;
                this.columnPaliwo.AllowDBNull = false;
                this.columnPaliwo.MaxLength = 50;
                this.columnPojemność.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SamochodyRow NewSamochodyRow() {
                return ((SamochodyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SamochodyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SamochodyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SamochodyRowChanged != null)) {
                    this.SamochodyRowChanged(this, new SamochodyRowChangeEvent(((SamochodyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SamochodyRowChanging != null)) {
                    this.SamochodyRowChanging(this, new SamochodyRowChangeEvent(((SamochodyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SamochodyRowDeleted != null)) {
                    this.SamochodyRowDeleted(this, new SamochodyRowChangeEvent(((SamochodyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SamochodyRowDeleting != null)) {
                    this.SamochodyRowDeleting(this, new SamochodyRowChangeEvent(((SamochodyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveSamochodyRow(SamochodyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RozliczenieSamochodówDataSet ds = new RozliczenieSamochodówDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SamochodyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UżytkownicyDataTable : global::System.Data.TypedTableBase<UżytkownicyRow> {
            
            private global::System.Data.DataColumn columnId_pracownika;
            
            private global::System.Data.DataColumn columnImie;
            
            private global::System.Data.DataColumn columnNazwisko;
            
            private global::System.Data.DataColumn columnDzień_urodzenia;
            
            private global::System.Data.DataColumn columnMiesiac_urodzenia;
            
            private global::System.Data.DataColumn columnRok_urodzenia;
            
            private global::System.Data.DataColumn columnStanowisko;
            
            private global::System.Data.DataColumn columnRodzaj_uprawnień;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UżytkownicyDataTable() {
                this.TableName = "Użytkownicy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal UżytkownicyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected UżytkownicyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Id_pracownikaColumn {
                get {
                    return this.columnId_pracownika;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ImieColumn {
                get {
                    return this.columnImie;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn NazwiskoColumn {
                get {
                    return this.columnNazwisko;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Dzień_urodzeniaColumn {
                get {
                    return this.columnDzień_urodzenia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Miesiac_urodzeniaColumn {
                get {
                    return this.columnMiesiac_urodzenia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Rok_urodzeniaColumn {
                get {
                    return this.columnRok_urodzenia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn StanowiskoColumn {
                get {
                    return this.columnStanowisko;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Rodzaj_uprawnieńColumn {
                get {
                    return this.columnRodzaj_uprawnień;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UżytkownicyRow this[int index] {
                get {
                    return ((UżytkownicyRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UżytkownicyRowChangeEventHandler UżytkownicyRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UżytkownicyRowChangeEventHandler UżytkownicyRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UżytkownicyRowChangeEventHandler UżytkownicyRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UżytkownicyRowChangeEventHandler UżytkownicyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddUżytkownicyRow(UżytkownicyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UżytkownicyRow AddUżytkownicyRow(int Id_pracownika, string Imie, string Nazwisko, int Dzień_urodzenia, int Miesiac_urodzenia, int Rok_urodzenia, string Stanowisko, string Rodzaj_uprawnień) {
                UżytkownicyRow rowUżytkownicyRow = ((UżytkownicyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id_pracownika,
                        Imie,
                        Nazwisko,
                        Dzień_urodzenia,
                        Miesiac_urodzenia,
                        Rok_urodzenia,
                        Stanowisko,
                        Rodzaj_uprawnień};
                rowUżytkownicyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUżytkownicyRow);
                return rowUżytkownicyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UżytkownicyRow FindById_pracownika(int Id_pracownika) {
                return ((UżytkownicyRow)(this.Rows.Find(new object[] {
                            Id_pracownika})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                UżytkownicyDataTable cln = ((UżytkownicyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UżytkownicyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnId_pracownika = base.Columns["Id pracownika"];
                this.columnImie = base.Columns["Imie"];
                this.columnNazwisko = base.Columns["Nazwisko"];
                this.columnDzień_urodzenia = base.Columns["Dzień urodzenia"];
                this.columnMiesiac_urodzenia = base.Columns["Miesiac urodzenia"];
                this.columnRok_urodzenia = base.Columns["Rok urodzenia"];
                this.columnStanowisko = base.Columns["Stanowisko"];
                this.columnRodzaj_uprawnień = base.Columns["Rodzaj uprawnień"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnId_pracownika = new global::System.Data.DataColumn("Id pracownika", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId_pracownika);
                this.columnImie = new global::System.Data.DataColumn("Imie", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImie);
                this.columnNazwisko = new global::System.Data.DataColumn("Nazwisko", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNazwisko);
                this.columnDzień_urodzenia = new global::System.Data.DataColumn("Dzień urodzenia", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDzień_urodzenia);
                this.columnMiesiac_urodzenia = new global::System.Data.DataColumn("Miesiac urodzenia", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiesiac_urodzenia);
                this.columnRok_urodzenia = new global::System.Data.DataColumn("Rok urodzenia", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRok_urodzenia);
                this.columnStanowisko = new global::System.Data.DataColumn("Stanowisko", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStanowisko);
                this.columnRodzaj_uprawnień = new global::System.Data.DataColumn("Rodzaj uprawnień", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRodzaj_uprawnień);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId_pracownika}, true));
                this.columnId_pracownika.AllowDBNull = false;
                this.columnId_pracownika.Unique = true;
                this.columnImie.AllowDBNull = false;
                this.columnImie.MaxLength = 50;
                this.columnNazwisko.AllowDBNull = false;
                this.columnNazwisko.MaxLength = 50;
                this.columnDzień_urodzenia.AllowDBNull = false;
                this.columnMiesiac_urodzenia.AllowDBNull = false;
                this.columnRok_urodzenia.AllowDBNull = false;
                this.columnStanowisko.MaxLength = 50;
                this.columnRodzaj_uprawnień.AllowDBNull = false;
                this.columnRodzaj_uprawnień.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UżytkownicyRow NewUżytkownicyRow() {
                return ((UżytkownicyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UżytkownicyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(UżytkownicyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UżytkownicyRowChanged != null)) {
                    this.UżytkownicyRowChanged(this, new UżytkownicyRowChangeEvent(((UżytkownicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UżytkownicyRowChanging != null)) {
                    this.UżytkownicyRowChanging(this, new UżytkownicyRowChangeEvent(((UżytkownicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UżytkownicyRowDeleted != null)) {
                    this.UżytkownicyRowDeleted(this, new UżytkownicyRowChangeEvent(((UżytkownicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UżytkownicyRowDeleting != null)) {
                    this.UżytkownicyRowDeleting(this, new UżytkownicyRowChangeEvent(((UżytkownicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveUżytkownicyRow(UżytkownicyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RozliczenieSamochodówDataSet ds = new RozliczenieSamochodówDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UżytkownicyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FakturaRow : global::System.Data.DataRow {
            
            private FakturaDataTable tableFaktura;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal FakturaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFaktura = ((FakturaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Id_faktury {
                get {
                    return ((int)(this[this.tableFaktura.Id_fakturyColumn]));
                }
                set {
                    this[this.tableFaktura.Id_fakturyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Sprzedawca {
                get {
                    return ((string)(this[this.tableFaktura.SprzedawcaColumn]));
                }
                set {
                    this[this.tableFaktura.SprzedawcaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Nabywca {
                get {
                    return ((string)(this[this.tableFaktura.NabywcaColumn]));
                }
                set {
                    this[this.tableFaktura.NabywcaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public decimal Suma {
                get {
                    return ((decimal)(this[this.tableFaktura.SumaColumn]));
                }
                set {
                    this[this.tableFaktura.SumaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Dzień_wystawienia {
                get {
                    return ((int)(this[this.tableFaktura.Dzień_wystawieniaColumn]));
                }
                set {
                    this[this.tableFaktura.Dzień_wystawieniaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Miesiąc_wystawienia {
                get {
                    return ((int)(this[this.tableFaktura.Miesiąc_wystawieniaColumn]));
                }
                set {
                    this[this.tableFaktura.Miesiąc_wystawieniaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Rok_wystawienia {
                get {
                    return ((int)(this[this.tableFaktura.Rok_wystawieniaColumn]));
                }
                set {
                    this[this.tableFaktura.Rok_wystawieniaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Dzień_Sprzedaży {
                get {
                    return ((int)(this[this.tableFaktura.Dzień_SprzedażyColumn]));
                }
                set {
                    this[this.tableFaktura.Dzień_SprzedażyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Miesiąc_Sprzedaży {
                get {
                    return ((int)(this[this.tableFaktura.Miesiąc_SprzedażyColumn]));
                }
                set {
                    this[this.tableFaktura.Miesiąc_SprzedażyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Rok_Sprzedaży {
                get {
                    return ((int)(this[this.tableFaktura.Rok_SprzedażyColumn]));
                }
                set {
                    this[this.tableFaktura.Rok_SprzedażyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Pozycje_fakturyRow[] GetPozycje_fakturyRows() {
                if ((this.Table.ChildRelations["FK_99"] == null)) {
                    return new Pozycje_fakturyRow[0];
                }
                else {
                    return ((Pozycje_fakturyRow[])(base.GetChildRows(this.Table.ChildRelations["FK_99"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PrzejazdRow[] GetPrzejazdRows() {
                if ((this.Table.ChildRelations["FK_118"] == null)) {
                    return new PrzejazdRow[0];
                }
                else {
                    return ((PrzejazdRow[])(base.GetChildRows(this.Table.ChildRelations["FK_118"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Miesięczna_Karta_DrogowaRow : global::System.Data.DataRow {
            
            private Miesięczna_Karta_DrogowaDataTable tableMiesięczna_Karta_Drogowa;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Miesięczna_Karta_DrogowaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMiesięczna_Karta_Drogowa = ((Miesięczna_Karta_DrogowaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Miesiąc {
                get {
                    return ((int)(this[this.tableMiesięczna_Karta_Drogowa.MiesiącColumn]));
                }
                set {
                    this[this.tableMiesięczna_Karta_Drogowa.MiesiącColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Rok {
                get {
                    return ((int)(this[this.tableMiesięczna_Karta_Drogowa.RokColumn]));
                }
                set {
                    this[this.tableMiesięczna_Karta_Drogowa.RokColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Nr_rejestracyjny {
                get {
                    return ((string)(this[this.tableMiesięczna_Karta_Drogowa.Nr_rejestracyjnyColumn]));
                }
                set {
                    this[this.tableMiesięczna_Karta_Drogowa.Nr_rejestracyjnyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SamochodyRow SamochodyRow {
                get {
                    return ((SamochodyRow)(this.GetParentRow(this.Table.ParentRelations["FK_96"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_96"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PrzejazdRow[] GetPrzejazdRows() {
                if ((this.Table.ChildRelations["FK_157"] == null)) {
                    return new PrzejazdRow[0];
                }
                else {
                    return ((PrzejazdRow[])(base.GetChildRows(this.Table.ChildRelations["FK_157"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Pozycje_fakturyRow : global::System.Data.DataRow {
            
            private Pozycje_fakturyDataTable tablePozycje_faktury;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Pozycje_fakturyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePozycje_faktury = ((Pozycje_fakturyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Id_pozycji {
                get {
                    return ((int)(this[this.tablePozycje_faktury.Id_pozycjiColumn]));
                }
                set {
                    this[this.tablePozycje_faktury.Id_pozycjiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Id_faktury {
                get {
                    return ((int)(this[this.tablePozycje_faktury.Id_fakturyColumn]));
                }
                set {
                    this[this.tablePozycje_faktury.Id_fakturyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Nazwa {
                get {
                    return ((string)(this[this.tablePozycje_faktury.NazwaColumn]));
                }
                set {
                    this[this.tablePozycje_faktury.NazwaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Ilość {
                get {
                    return ((int)(this[this.tablePozycje_faktury.IlośćColumn]));
                }
                set {
                    this[this.tablePozycje_faktury.IlośćColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public decimal Cena_jednostkowa_brutto {
                get {
                    return ((decimal)(this[this.tablePozycje_faktury.Cena_jednostkowa_bruttoColumn]));
                }
                set {
                    this[this.tablePozycje_faktury.Cena_jednostkowa_bruttoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public decimal Wartość_netto {
                get {
                    return ((decimal)(this[this.tablePozycje_faktury.Wartość_nettoColumn]));
                }
                set {
                    this[this.tablePozycje_faktury.Wartość_nettoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Stawka {
                get {
                    return ((int)(this[this.tablePozycje_faktury.StawkaColumn]));
                }
                set {
                    this[this.tablePozycje_faktury.StawkaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public decimal Podatek {
                get {
                    return ((decimal)(this[this.tablePozycje_faktury.PodatekColumn]));
                }
                set {
                    this[this.tablePozycje_faktury.PodatekColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public decimal Wartość_brutto {
                get {
                    return ((decimal)(this[this.tablePozycje_faktury.Wartość_bruttoColumn]));
                }
                set {
                    this[this.tablePozycje_faktury.Wartość_bruttoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public decimal Suma {
                get {
                    return ((decimal)(this[this.tablePozycje_faktury.SumaColumn]));
                }
                set {
                    this[this.tablePozycje_faktury.SumaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FakturaRow FakturaRow {
                get {
                    return ((FakturaRow)(this.GetParentRow(this.Table.ParentRelations["FK_99"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_99"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PrzejazdRow : global::System.Data.DataRow {
            
            private PrzejazdDataTable tablePrzejazd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal PrzejazdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrzejazd = ((PrzejazdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Id_przejazdu {
                get {
                    return ((int)(this[this.tablePrzejazd.Id_przejazduColumn]));
                }
                set {
                    this[this.tablePrzejazd.Id_przejazduColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Dzień_Miesiąca {
                get {
                    return ((int)(this[this.tablePrzejazd.Dzień_MiesiącaColumn]));
                }
                set {
                    this[this.tablePrzejazd.Dzień_MiesiącaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Cel_wyjazdu {
                get {
                    return ((string)(this[this.tablePrzejazd.Cel_wyjazduColumn]));
                }
                set {
                    this[this.tablePrzejazd.Cel_wyjazduColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Trasa {
                get {
                    return ((string)(this[this.tablePrzejazd.TrasaColumn]));
                }
                set {
                    this[this.tablePrzejazd.TrasaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Stan_licznika_przy_wyjeździe {
                get {
                    return ((int)(this[this.tablePrzejazd.Stan_licznika_przy_wyjeździeColumn]));
                }
                set {
                    this[this.tablePrzejazd.Stan_licznika_przy_wyjeździeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Stan_licznika_po_powrocie {
                get {
                    return ((int)(this[this.tablePrzejazd.Stan_licznika_po_powrocieColumn]));
                }
                set {
                    this[this.tablePrzejazd.Stan_licznika_po_powrocieColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Ilość_przejechanych_km_ {
                get {
                    return ((int)(this[this.tablePrzejazd.Ilość_przejechanych_km_Column]));
                }
                set {
                    this[this.tablePrzejazd.Ilość_przejechanych_km_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Id_pracownika {
                get {
                    return ((int)(this[this.tablePrzejazd.Id_pracownikaColumn]));
                }
                set {
                    this[this.tablePrzejazd.Id_pracownikaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Id_faktury {
                get {
                    try {
                        return ((int)(this[this.tablePrzejazd.Id_fakturyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Wartość z kolumny \'Id faktury\' w tabeli \'Przejazd\' to DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrzejazd.Id_fakturyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Miesiąc {
                get {
                    return ((int)(this[this.tablePrzejazd.MiesiącColumn]));
                }
                set {
                    this[this.tablePrzejazd.MiesiącColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Rok {
                get {
                    return ((int)(this[this.tablePrzejazd.RokColumn]));
                }
                set {
                    this[this.tablePrzejazd.RokColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Nr_rejestracyjny {
                get {
                    return ((string)(this[this.tablePrzejazd.Nr_rejestracyjnyColumn]));
                }
                set {
                    this[this.tablePrzejazd.Nr_rejestracyjnyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UżytkownicyRow UżytkownicyRow {
                get {
                    return ((UżytkownicyRow)(this.GetParentRow(this.Table.ParentRelations["FK_115"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_115"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FakturaRow FakturaRow {
                get {
                    return ((FakturaRow)(this.GetParentRow(this.Table.ParentRelations["FK_118"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_118"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Miesięczna_Karta_DrogowaRow Miesięczna_Karta_DrogowaRowParent {
                get {
                    return ((Miesięczna_Karta_DrogowaRow)(this.GetParentRow(this.Table.ParentRelations["FK_157"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_157"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsId_fakturyNull() {
                return this.IsNull(this.tablePrzejazd.Id_fakturyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetId_fakturyNull() {
                this[this.tablePrzejazd.Id_fakturyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SamochodyRow : global::System.Data.DataRow {
            
            private SamochodyDataTable tableSamochody;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SamochodyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSamochody = ((SamochodyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Nr_rejestracyjny {
                get {
                    return ((string)(this[this.tableSamochody.Nr_rejestracyjnyColumn]));
                }
                set {
                    this[this.tableSamochody.Nr_rejestracyjnyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Typ {
                get {
                    return ((string)(this[this.tableSamochody.TypColumn]));
                }
                set {
                    this[this.tableSamochody.TypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Marka {
                get {
                    return ((string)(this[this.tableSamochody.MarkaColumn]));
                }
                set {
                    this[this.tableSamochody.MarkaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Model {
                get {
                    return ((string)(this[this.tableSamochody.ModelColumn]));
                }
                set {
                    this[this.tableSamochody.ModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Własność {
                get {
                    return ((string)(this[this.tableSamochody.WłasnośćColumn]));
                }
                set {
                    this[this.tableSamochody.WłasnośćColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Paliwo {
                get {
                    return ((string)(this[this.tableSamochody.PaliwoColumn]));
                }
                set {
                    this[this.tableSamochody.PaliwoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public decimal Pojemność {
                get {
                    return ((decimal)(this[this.tableSamochody.PojemnośćColumn]));
                }
                set {
                    this[this.tableSamochody.PojemnośćColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Miesięczna_Karta_DrogowaRow[] GetMiesięczna_Karta_DrogowaRows() {
                if ((this.Table.ChildRelations["FK_96"] == null)) {
                    return new Miesięczna_Karta_DrogowaRow[0];
                }
                else {
                    return ((Miesięczna_Karta_DrogowaRow[])(base.GetChildRows(this.Table.ChildRelations["FK_96"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class UżytkownicyRow : global::System.Data.DataRow {
            
            private UżytkownicyDataTable tableUżytkownicy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal UżytkownicyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUżytkownicy = ((UżytkownicyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Id_pracownika {
                get {
                    return ((int)(this[this.tableUżytkownicy.Id_pracownikaColumn]));
                }
                set {
                    this[this.tableUżytkownicy.Id_pracownikaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Imie {
                get {
                    return ((string)(this[this.tableUżytkownicy.ImieColumn]));
                }
                set {
                    this[this.tableUżytkownicy.ImieColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Nazwisko {
                get {
                    return ((string)(this[this.tableUżytkownicy.NazwiskoColumn]));
                }
                set {
                    this[this.tableUżytkownicy.NazwiskoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Dzień_urodzenia {
                get {
                    return ((int)(this[this.tableUżytkownicy.Dzień_urodzeniaColumn]));
                }
                set {
                    this[this.tableUżytkownicy.Dzień_urodzeniaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Miesiac_urodzenia {
                get {
                    return ((int)(this[this.tableUżytkownicy.Miesiac_urodzeniaColumn]));
                }
                set {
                    this[this.tableUżytkownicy.Miesiac_urodzeniaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Rok_urodzenia {
                get {
                    return ((int)(this[this.tableUżytkownicy.Rok_urodzeniaColumn]));
                }
                set {
                    this[this.tableUżytkownicy.Rok_urodzeniaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Stanowisko {
                get {
                    try {
                        return ((string)(this[this.tableUżytkownicy.StanowiskoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Wartość z kolumny \'Stanowisko\' w tabeli \'Użytkownicy\' to DBNull.", e);
                    }
                }
                set {
                    this[this.tableUżytkownicy.StanowiskoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Rodzaj_uprawnień {
                get {
                    return ((string)(this[this.tableUżytkownicy.Rodzaj_uprawnieńColumn]));
                }
                set {
                    this[this.tableUżytkownicy.Rodzaj_uprawnieńColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsStanowiskoNull() {
                return this.IsNull(this.tableUżytkownicy.StanowiskoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetStanowiskoNull() {
                this[this.tableUżytkownicy.StanowiskoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PrzejazdRow[] GetPrzejazdRows() {
                if ((this.Table.ChildRelations["FK_115"] == null)) {
                    return new PrzejazdRow[0];
                }
                else {
                    return ((PrzejazdRow[])(base.GetChildRows(this.Table.ChildRelations["FK_115"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class FakturaRowChangeEvent : global::System.EventArgs {
            
            private FakturaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FakturaRowChangeEvent(FakturaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FakturaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Miesięczna_Karta_DrogowaRowChangeEvent : global::System.EventArgs {
            
            private Miesięczna_Karta_DrogowaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Miesięczna_Karta_DrogowaRowChangeEvent(Miesięczna_Karta_DrogowaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Miesięczna_Karta_DrogowaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Pozycje_fakturyRowChangeEvent : global::System.EventArgs {
            
            private Pozycje_fakturyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Pozycje_fakturyRowChangeEvent(Pozycje_fakturyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Pozycje_fakturyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class PrzejazdRowChangeEvent : global::System.EventArgs {
            
            private PrzejazdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PrzejazdRowChangeEvent(PrzejazdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PrzejazdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class SamochodyRowChangeEvent : global::System.EventArgs {
            
            private SamochodyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SamochodyRowChangeEvent(SamochodyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SamochodyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class UżytkownicyRowChangeEvent : global::System.EventArgs {
            
            private UżytkownicyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UżytkownicyRowChangeEvent(UżytkownicyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UżytkownicyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace RozliczenieSamochodów.RozliczenieSamochodówDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FakturaTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public FakturaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Faktura";
            tableMapping.ColumnMappings.Add("Id faktury", "Id faktury");
            tableMapping.ColumnMappings.Add("Sprzedawca", "Sprzedawca");
            tableMapping.ColumnMappings.Add("Nabywca", "Nabywca");
            tableMapping.ColumnMappings.Add("Suma", "Suma");
            tableMapping.ColumnMappings.Add("Dzień wystawienia", "Dzień wystawienia");
            tableMapping.ColumnMappings.Add("Miesiąc wystawienia", "Miesiąc wystawienia");
            tableMapping.ColumnMappings.Add("Rok wystawienia", "Rok wystawienia");
            tableMapping.ColumnMappings.Add("Dzień Sprzedaży", "Dzień Sprzedaży");
            tableMapping.ColumnMappings.Add("Miesiąc Sprzedaży", "Miesiąc Sprzedaży");
            tableMapping.ColumnMappings.Add("Rok Sprzedaży", "Rok Sprzedaży");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Faktura] WHERE (([Id faktury] = @Original_Id_faktury) AND ([Sprzedawca] = @Original_Sprzedawca) AND ([Nabywca] = @Original_Nabywca) AND ([Suma] = @Original_Suma) AND ([Dzień wystawienia] = @Original_Dzień_wystawienia) AND ([Miesiąc wystawienia] = @Original_Miesiąc_wystawienia) AND ([Rok wystawienia] = @Original_Rok_wystawienia) AND ([Dzień Sprzedaży] = @Original_Dzień_Sprzedaży) AND ([Miesiąc Sprzedaży] = @Original_Miesiąc_Sprzedaży) AND ([Rok Sprzedaży] = @Original_Rok_Sprzedaży))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sprzedawca", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sprzedawca", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nabywca", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nabywca", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Suma", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Suma", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Dzień_wystawienia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień wystawienia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Miesiąc_wystawienia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc wystawienia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rok_wystawienia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok wystawienia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Dzień_Sprzedaży", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień Sprzedaży", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Miesiąc_Sprzedaży", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc Sprzedaży", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rok_Sprzedaży", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok Sprzedaży", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Faktura] ([Id faktury], [Sprzedawca], [Nabywca], [Suma], [Dzień wystawienia], [Miesiąc wystawienia], [Rok wystawienia], [Dzień Sprzedaży], [Miesiąc Sprzedaży], [Rok Sprzedaży]) VALUES (@Id_faktury, @Sprzedawca, @Nabywca, @Suma, @Dzień_wystawienia, @Miesiąc_wystawienia, @Rok_wystawienia, @Dzień_Sprzedaży, @Miesiąc_Sprzedaży, @Rok_Sprzedaży);
SELECT [Id faktury], Sprzedawca, Nabywca, Suma, [Dzień wystawienia], [Miesiąc wystawienia], [Rok wystawienia], [Dzień Sprzedaży], [Miesiąc Sprzedaży], [Rok Sprzedaży] FROM Faktura WHERE ([Id faktury] = @Id_faktury)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sprzedawca", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sprzedawca", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nabywca", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nabywca", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Suma", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Suma", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Dzień_wystawienia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień wystawienia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Miesiąc_wystawienia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc wystawienia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rok_wystawienia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok wystawienia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Dzień_Sprzedaży", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień Sprzedaży", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Miesiąc_Sprzedaży", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc Sprzedaży", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rok_Sprzedaży", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok Sprzedaży", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Faktura] SET [Id faktury] = @Id_faktury, [Sprzedawca] = @Sprzedawca, [Nabywca] = @Nabywca, [Suma] = @Suma, [Dzień wystawienia] = @Dzień_wystawienia, [Miesiąc wystawienia] = @Miesiąc_wystawienia, [Rok wystawienia] = @Rok_wystawienia, [Dzień Sprzedaży] = @Dzień_Sprzedaży, [Miesiąc Sprzedaży] = @Miesiąc_Sprzedaży, [Rok Sprzedaży] = @Rok_Sprzedaży WHERE (([Id faktury] = @Original_Id_faktury) AND ([Sprzedawca] = @Original_Sprzedawca) AND ([Nabywca] = @Original_Nabywca) AND ([Suma] = @Original_Suma) AND ([Dzień wystawienia] = @Original_Dzień_wystawienia) AND ([Miesiąc wystawienia] = @Original_Miesiąc_wystawienia) AND ([Rok wystawienia] = @Original_Rok_wystawienia) AND ([Dzień Sprzedaży] = @Original_Dzień_Sprzedaży) AND ([Miesiąc Sprzedaży] = @Original_Miesiąc_Sprzedaży) AND ([Rok Sprzedaży] = @Original_Rok_Sprzedaży));
SELECT [Id faktury], Sprzedawca, Nabywca, Suma, [Dzień wystawienia], [Miesiąc wystawienia], [Rok wystawienia], [Dzień Sprzedaży], [Miesiąc Sprzedaży], [Rok Sprzedaży] FROM Faktura WHERE ([Id faktury] = @Id_faktury)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sprzedawca", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sprzedawca", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nabywca", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nabywca", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Suma", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Suma", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Dzień_wystawienia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień wystawienia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Miesiąc_wystawienia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc wystawienia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rok_wystawienia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok wystawienia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Dzień_Sprzedaży", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień Sprzedaży", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Miesiąc_Sprzedaży", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc Sprzedaży", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rok_Sprzedaży", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok Sprzedaży", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sprzedawca", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sprzedawca", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nabywca", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nabywca", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Suma", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Suma", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Dzień_wystawienia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień wystawienia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Miesiąc_wystawienia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc wystawienia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rok_wystawienia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok wystawienia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Dzień_Sprzedaży", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień Sprzedaży", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Miesiąc_Sprzedaży", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc Sprzedaży", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rok_Sprzedaży", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok Sprzedaży", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RozliczenieSamochodów.Properties.Settings.Default.RozliczenieSamochodówConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Id faktury], Sprzedawca, Nabywca, Suma, [Dzień wystawienia], [Miesiąc wys" +
                "tawienia], [Rok wystawienia], [Dzień Sprzedaży], [Miesiąc Sprzedaży], [Rok Sprze" +
                "daży] FROM dbo.Faktura";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RozliczenieSamochodówDataSet.FakturaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RozliczenieSamochodówDataSet.FakturaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RozliczenieSamochodówDataSet.FakturaDataTable dataTable = new RozliczenieSamochodówDataSet.FakturaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RozliczenieSamochodówDataSet.FakturaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RozliczenieSamochodówDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Faktura");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Id_faktury, string Original_Sprzedawca, string Original_Nabywca, decimal Original_Suma, int Original_Dzień_wystawienia, int Original_Miesiąc_wystawienia, int Original_Rok_wystawienia, int Original_Dzień_Sprzedaży, int Original_Miesiąc_Sprzedaży, int Original_Rok_Sprzedaży) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Id_faktury));
            if ((Original_Sprzedawca == null)) {
                throw new global::System.ArgumentNullException("Original_Sprzedawca");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Sprzedawca));
            }
            if ((Original_Nabywca == null)) {
                throw new global::System.ArgumentNullException("Original_Nabywca");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Nabywca));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_Suma));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_Dzień_wystawienia));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_Miesiąc_wystawienia));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_Rok_wystawienia));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_Dzień_Sprzedaży));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Miesiąc_Sprzedaży));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_Rok_Sprzedaży));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Id_faktury, string Sprzedawca, string Nabywca, decimal Suma, int Dzień_wystawienia, int Miesiąc_wystawienia, int Rok_wystawienia, int Dzień_Sprzedaży, int Miesiąc_Sprzedaży, int Rok_Sprzedaży) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Id_faktury));
            if ((Sprzedawca == null)) {
                throw new global::System.ArgumentNullException("Sprzedawca");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Sprzedawca));
            }
            if ((Nabywca == null)) {
                throw new global::System.ArgumentNullException("Nabywca");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Nabywca));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(Suma));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Dzień_wystawienia));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Miesiąc_wystawienia));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Rok_wystawienia));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(Dzień_Sprzedaży));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(Miesiąc_Sprzedaży));
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(Rok_Sprzedaży));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int Id_faktury, 
                    string Sprzedawca, 
                    string Nabywca, 
                    decimal Suma, 
                    int Dzień_wystawienia, 
                    int Miesiąc_wystawienia, 
                    int Rok_wystawienia, 
                    int Dzień_Sprzedaży, 
                    int Miesiąc_Sprzedaży, 
                    int Rok_Sprzedaży, 
                    int Original_Id_faktury, 
                    string Original_Sprzedawca, 
                    string Original_Nabywca, 
                    decimal Original_Suma, 
                    int Original_Dzień_wystawienia, 
                    int Original_Miesiąc_wystawienia, 
                    int Original_Rok_wystawienia, 
                    int Original_Dzień_Sprzedaży, 
                    int Original_Miesiąc_Sprzedaży, 
                    int Original_Rok_Sprzedaży) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Id_faktury));
            if ((Sprzedawca == null)) {
                throw new global::System.ArgumentNullException("Sprzedawca");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Sprzedawca));
            }
            if ((Nabywca == null)) {
                throw new global::System.ArgumentNullException("Nabywca");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Nabywca));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Suma));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Dzień_wystawienia));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Miesiąc_wystawienia));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Rok_wystawienia));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Dzień_Sprzedaży));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Miesiąc_Sprzedaży));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Rok_Sprzedaży));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_Id_faktury));
            if ((Original_Sprzedawca == null)) {
                throw new global::System.ArgumentNullException("Original_Sprzedawca");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Sprzedawca));
            }
            if ((Original_Nabywca == null)) {
                throw new global::System.ArgumentNullException("Original_Nabywca");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Nabywca));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(Original_Suma));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_Dzień_wystawienia));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_Miesiąc_wystawienia));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_Rok_wystawienia));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_Dzień_Sprzedaży));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_Miesiąc_Sprzedaży));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_Rok_Sprzedaży));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Sprzedawca, 
                    string Nabywca, 
                    decimal Suma, 
                    int Dzień_wystawienia, 
                    int Miesiąc_wystawienia, 
                    int Rok_wystawienia, 
                    int Dzień_Sprzedaży, 
                    int Miesiąc_Sprzedaży, 
                    int Rok_Sprzedaży, 
                    int Original_Id_faktury, 
                    string Original_Sprzedawca, 
                    string Original_Nabywca, 
                    decimal Original_Suma, 
                    int Original_Dzień_wystawienia, 
                    int Original_Miesiąc_wystawienia, 
                    int Original_Rok_wystawienia, 
                    int Original_Dzień_Sprzedaży, 
                    int Original_Miesiąc_Sprzedaży, 
                    int Original_Rok_Sprzedaży) {
            return this.Update(Original_Id_faktury, Sprzedawca, Nabywca, Suma, Dzień_wystawienia, Miesiąc_wystawienia, Rok_wystawienia, Dzień_Sprzedaży, Miesiąc_Sprzedaży, Rok_Sprzedaży, Original_Id_faktury, Original_Sprzedawca, Original_Nabywca, Original_Suma, Original_Dzień_wystawienia, Original_Miesiąc_wystawienia, Original_Rok_wystawienia, Original_Dzień_Sprzedaży, Original_Miesiąc_Sprzedaży, Original_Rok_Sprzedaży);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Miesięczna_Karta_DrogowaTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Miesięczna_Karta_DrogowaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Miesięczna Karta Drogowa";
            tableMapping.ColumnMappings.Add("Miesiąc", "Miesiąc");
            tableMapping.ColumnMappings.Add("Rok", "Rok");
            tableMapping.ColumnMappings.Add("Nr rejestracyjny", "Nr rejestracyjny");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Miesięczna Karta Drogowa] WHERE (([Miesiąc] = @Original_Miesią" +
                "c) AND ([Rok] = @Original_Rok) AND ([Nr rejestracyjny] = @Original_Nr_rejestracy" +
                "jny))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Miesiąc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nr_rejestracyjny", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nr rejestracyjny", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Miesięczna Karta Drogowa] ([Miesiąc], [Rok], [Nr rejestracyjny]) VALUES (@Miesiąc, @Rok, @Nr_rejestracyjny);
SELECT Miesiąc, Rok, [Nr rejestracyjny] FROM [Miesięczna Karta Drogowa] WHERE (Miesiąc = @Miesiąc) AND ([Nr rejestracyjny] = @Nr_rejestracyjny) AND (Rok = @Rok)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Miesiąc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nr_rejestracyjny", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nr rejestracyjny", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Miesięczna Karta Drogowa] SET [Miesiąc] = @Miesiąc, [Rok] = @Rok, [Nr rejestracyjny] = @Nr_rejestracyjny WHERE (([Miesiąc] = @Original_Miesiąc) AND ([Rok] = @Original_Rok) AND ([Nr rejestracyjny] = @Original_Nr_rejestracyjny));
SELECT Miesiąc, Rok, [Nr rejestracyjny] FROM [Miesięczna Karta Drogowa] WHERE (Miesiąc = @Miesiąc) AND ([Nr rejestracyjny] = @Nr_rejestracyjny) AND (Rok = @Rok)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Miesiąc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nr_rejestracyjny", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nr rejestracyjny", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Miesiąc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nr_rejestracyjny", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nr rejestracyjny", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RozliczenieSamochodów.Properties.Settings.Default.RozliczenieSamochodówConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Miesiąc, Rok, [Nr rejestracyjny] FROM dbo.[Miesięczna Karta Drogowa]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RozliczenieSamochodówDataSet.Miesięczna_Karta_DrogowaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RozliczenieSamochodówDataSet.Miesięczna_Karta_DrogowaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RozliczenieSamochodówDataSet.Miesięczna_Karta_DrogowaDataTable dataTable = new RozliczenieSamochodówDataSet.Miesięczna_Karta_DrogowaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RozliczenieSamochodówDataSet.Miesięczna_Karta_DrogowaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RozliczenieSamochodówDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Miesięczna Karta Drogowa");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Miesiąc, int Original_Rok, string Original_Nr_rejestracyjny) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Miesiąc));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_Rok));
            if ((Original_Nr_rejestracyjny == null)) {
                throw new global::System.ArgumentNullException("Original_Nr_rejestracyjny");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Nr_rejestracyjny));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Miesiąc, int Rok, string Nr_rejestracyjny) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Miesiąc));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Rok));
            if ((Nr_rejestracyjny == null)) {
                throw new global::System.ArgumentNullException("Nr_rejestracyjny");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Nr_rejestracyjny));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Miesiąc, int Rok, string Nr_rejestracyjny, int Original_Miesiąc, int Original_Rok, string Original_Nr_rejestracyjny) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Miesiąc));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Rok));
            if ((Nr_rejestracyjny == null)) {
                throw new global::System.ArgumentNullException("Nr_rejestracyjny");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Nr_rejestracyjny));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_Miesiąc));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_Rok));
            if ((Original_Nr_rejestracyjny == null)) {
                throw new global::System.ArgumentNullException("Original_Nr_rejestracyjny");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Nr_rejestracyjny));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Original_Miesiąc, int Original_Rok, string Original_Nr_rejestracyjny) {
            return this.Update(Original_Miesiąc, Original_Rok, Original_Nr_rejestracyjny, Original_Miesiąc, Original_Rok, Original_Nr_rejestracyjny);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Pozycje_fakturyTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Pozycje_fakturyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Pozycje faktury";
            tableMapping.ColumnMappings.Add("Id pozycji", "Id pozycji");
            tableMapping.ColumnMappings.Add("Id faktury", "Id faktury");
            tableMapping.ColumnMappings.Add("Nazwa", "Nazwa");
            tableMapping.ColumnMappings.Add("Ilość", "Ilość");
            tableMapping.ColumnMappings.Add("Cena jednostkowa brutto", "Cena jednostkowa brutto");
            tableMapping.ColumnMappings.Add("Wartość netto", "Wartość netto");
            tableMapping.ColumnMappings.Add("Stawka", "Stawka");
            tableMapping.ColumnMappings.Add("Podatek", "Podatek");
            tableMapping.ColumnMappings.Add("Wartość brutto", "Wartość brutto");
            tableMapping.ColumnMappings.Add("Suma", "Suma");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Pozycje faktury] WHERE (([Id pozycji] = @Original_Id_pozycji) AND ([Id faktury] = @Original_Id_faktury) AND ([Nazwa] = @Original_Nazwa) AND ([Ilość] = @Original_Ilość) AND ([Cena jednostkowa brutto] = @Original_Cena_jednostkowa_brutto) AND ([Wartość netto] = @Original_Wartość_netto) AND ([Stawka] = @Original_Stawka) AND ([Podatek] = @Original_Podatek) AND ([Wartość brutto] = @Original_Wartość_brutto) AND ([Suma] = @Original_Suma))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_pozycji", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id pozycji", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nazwa", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nazwa", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ilość", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ilość", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Cena_jednostkowa_brutto", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cena jednostkowa brutto", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Wartość_netto", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Wartość netto", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Stawka", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stawka", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Podatek", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Podatek", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Wartość_brutto", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Wartość brutto", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Suma", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Suma", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Pozycje faktury] ([Id pozycji], [Id faktury], [Nazwa], [Ilość], [Cena jednostkowa brutto], [Wartość netto], [Stawka], [Podatek], [Wartość brutto], [Suma]) VALUES (@Id_pozycji, @Id_faktury, @Nazwa, @Ilość, @Cena_jednostkowa_brutto, @Wartość_netto, @Stawka, @Podatek, @Wartość_brutto, @Suma);
SELECT [Id pozycji], [Id faktury], Nazwa, Ilość, [Cena jednostkowa brutto], [Wartość netto], Stawka, Podatek, [Wartość brutto], Suma FROM [Pozycje faktury] WHERE ([Id pozycji] = @Id_pozycji)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_pozycji", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id pozycji", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nazwa", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nazwa", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ilość", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ilość", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cena_jednostkowa_brutto", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cena jednostkowa brutto", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Wartość_netto", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Wartość netto", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Stawka", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stawka", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Podatek", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Podatek", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Wartość_brutto", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Wartość brutto", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Suma", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Suma", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Pozycje faktury] SET [Id pozycji] = @Id_pozycji, [Id faktury] = @Id_faktury, [Nazwa] = @Nazwa, [Ilość] = @Ilość, [Cena jednostkowa brutto] = @Cena_jednostkowa_brutto, [Wartość netto] = @Wartość_netto, [Stawka] = @Stawka, [Podatek] = @Podatek, [Wartość brutto] = @Wartość_brutto, [Suma] = @Suma WHERE (([Id pozycji] = @Original_Id_pozycji) AND ([Id faktury] = @Original_Id_faktury) AND ([Nazwa] = @Original_Nazwa) AND ([Ilość] = @Original_Ilość) AND ([Cena jednostkowa brutto] = @Original_Cena_jednostkowa_brutto) AND ([Wartość netto] = @Original_Wartość_netto) AND ([Stawka] = @Original_Stawka) AND ([Podatek] = @Original_Podatek) AND ([Wartość brutto] = @Original_Wartość_brutto) AND ([Suma] = @Original_Suma));
SELECT [Id pozycji], [Id faktury], Nazwa, Ilość, [Cena jednostkowa brutto], [Wartość netto], Stawka, Podatek, [Wartość brutto], Suma FROM [Pozycje faktury] WHERE ([Id pozycji] = @Id_pozycji)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_pozycji", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id pozycji", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nazwa", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nazwa", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ilość", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ilość", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cena_jednostkowa_brutto", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cena jednostkowa brutto", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Wartość_netto", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Wartość netto", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Stawka", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stawka", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Podatek", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Podatek", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Wartość_brutto", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Wartość brutto", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Suma", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Suma", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_pozycji", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id pozycji", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nazwa", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nazwa", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ilość", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ilość", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Cena_jednostkowa_brutto", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cena jednostkowa brutto", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Wartość_netto", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Wartość netto", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Stawka", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stawka", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Podatek", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Podatek", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Wartość_brutto", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Wartość brutto", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Suma", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Suma", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RozliczenieSamochodów.Properties.Settings.Default.RozliczenieSamochodówConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Id pozycji], [Id faktury], Nazwa, Ilość, [Cena jednostkowa brutto], [Wart" +
                "ość netto], Stawka, Podatek, [Wartość brutto], Suma FROM dbo.[Pozycje faktury]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RozliczenieSamochodówDataSet.Pozycje_fakturyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RozliczenieSamochodówDataSet.Pozycje_fakturyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RozliczenieSamochodówDataSet.Pozycje_fakturyDataTable dataTable = new RozliczenieSamochodówDataSet.Pozycje_fakturyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RozliczenieSamochodówDataSet.Pozycje_fakturyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RozliczenieSamochodówDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Pozycje faktury");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Id_pozycji, int Original_Id_faktury, string Original_Nazwa, int Original_Ilość, decimal Original_Cena_jednostkowa_brutto, decimal Original_Wartość_netto, int Original_Stawka, decimal Original_Podatek, decimal Original_Wartość_brutto, decimal Original_Suma) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Id_pozycji));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_Id_faktury));
            if ((Original_Nazwa == null)) {
                throw new global::System.ArgumentNullException("Original_Nazwa");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Nazwa));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_Ilość));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_Cena_jednostkowa_brutto));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_Wartość_netto));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_Stawka));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_Podatek));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_Wartość_brutto));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_Suma));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Id_pozycji, int Id_faktury, string Nazwa, int Ilość, decimal Cena_jednostkowa_brutto, decimal Wartość_netto, int Stawka, decimal Podatek, decimal Wartość_brutto, decimal Suma) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Id_pozycji));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Id_faktury));
            if ((Nazwa == null)) {
                throw new global::System.ArgumentNullException("Nazwa");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Nazwa));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Ilość));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(Cena_jednostkowa_brutto));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(Wartość_netto));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Stawka));
            this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(Podatek));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(Wartość_brutto));
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(Suma));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int Id_pozycji, 
                    int Id_faktury, 
                    string Nazwa, 
                    int Ilość, 
                    decimal Cena_jednostkowa_brutto, 
                    decimal Wartość_netto, 
                    int Stawka, 
                    decimal Podatek, 
                    decimal Wartość_brutto, 
                    decimal Suma, 
                    int Original_Id_pozycji, 
                    int Original_Id_faktury, 
                    string Original_Nazwa, 
                    int Original_Ilość, 
                    decimal Original_Cena_jednostkowa_brutto, 
                    decimal Original_Wartość_netto, 
                    int Original_Stawka, 
                    decimal Original_Podatek, 
                    decimal Original_Wartość_brutto, 
                    decimal Original_Suma) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Id_pozycji));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Id_faktury));
            if ((Nazwa == null)) {
                throw new global::System.ArgumentNullException("Nazwa");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Nazwa));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Ilość));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Cena_jednostkowa_brutto));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Wartość_netto));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Stawka));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Podatek));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Wartość_brutto));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Suma));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_Id_pozycji));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_Id_faktury));
            if ((Original_Nazwa == null)) {
                throw new global::System.ArgumentNullException("Original_Nazwa");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Nazwa));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_Ilość));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_Cena_jednostkowa_brutto));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(Original_Wartość_netto));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_Stawka));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(Original_Podatek));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_Wartość_brutto));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(Original_Suma));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int Id_faktury, 
                    string Nazwa, 
                    int Ilość, 
                    decimal Cena_jednostkowa_brutto, 
                    decimal Wartość_netto, 
                    int Stawka, 
                    decimal Podatek, 
                    decimal Wartość_brutto, 
                    decimal Suma, 
                    int Original_Id_pozycji, 
                    int Original_Id_faktury, 
                    string Original_Nazwa, 
                    int Original_Ilość, 
                    decimal Original_Cena_jednostkowa_brutto, 
                    decimal Original_Wartość_netto, 
                    int Original_Stawka, 
                    decimal Original_Podatek, 
                    decimal Original_Wartość_brutto, 
                    decimal Original_Suma) {
            return this.Update(Original_Id_pozycji, Id_faktury, Nazwa, Ilość, Cena_jednostkowa_brutto, Wartość_netto, Stawka, Podatek, Wartość_brutto, Suma, Original_Id_pozycji, Original_Id_faktury, Original_Nazwa, Original_Ilość, Original_Cena_jednostkowa_brutto, Original_Wartość_netto, Original_Stawka, Original_Podatek, Original_Wartość_brutto, Original_Suma);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PrzejazdTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public PrzejazdTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Przejazd";
            tableMapping.ColumnMappings.Add("Id przejazdu", "Id przejazdu");
            tableMapping.ColumnMappings.Add("Dzień Miesiąca", "Dzień Miesiąca");
            tableMapping.ColumnMappings.Add("Cel wyjazdu", "Cel wyjazdu");
            tableMapping.ColumnMappings.Add("Trasa", "Trasa");
            tableMapping.ColumnMappings.Add("Stan licznika przy wyjeździe", "Stan licznika przy wyjeździe");
            tableMapping.ColumnMappings.Add("Stan licznika po powrocie", "Stan licznika po powrocie");
            tableMapping.ColumnMappings.Add("Ilość przejechanych km.", "Ilość przejechanych km_");
            tableMapping.ColumnMappings.Add("Id pracownika", "Id pracownika");
            tableMapping.ColumnMappings.Add("Id faktury", "Id faktury");
            tableMapping.ColumnMappings.Add("Miesiąc", "Miesiąc");
            tableMapping.ColumnMappings.Add("Rok", "Rok");
            tableMapping.ColumnMappings.Add("Nr rejestracyjny", "Nr rejestracyjny");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Przejazd] WHERE (([Id przejazdu] = @Original_Id_przejazdu) AND ([Dzień Miesiąca] = @Original_Dzień_Miesiąca) AND ([Cel wyjazdu] = @Original_Cel_wyjazdu) AND ([Trasa] = @Original_Trasa) AND ([Stan licznika przy wyjeździe] = @Original_Stan_licznika_przy_wyjeździe) AND ([Stan licznika po powrocie] = @Original_Stan_licznika_po_powrocie) AND ([Ilość przejechanych km.] = @p2) AND ([Id pracownika] = @Original_Id_pracownika) AND ((@IsNull_Id_faktury = 1 AND [Id faktury] IS NULL) OR ([Id faktury] = @Original_Id_faktury)) AND ([Miesiąc] = @Original_Miesiąc) AND ([Rok] = @Original_Rok) AND ([Nr rejestracyjny] = @Original_Nr_rejestracyjny))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_przejazdu", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id przejazdu", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Dzień_Miesiąca", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień Miesiąca", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Cel_wyjazdu", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cel wyjazdu", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Trasa", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Trasa", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Stan_licznika_przy_wyjeździe", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stan licznika przy wyjeździe", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Stan_licznika_po_powrocie", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stan licznika po powrocie", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ilość przejechanych km.", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_pracownika", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id pracownika", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Miesiąc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nr_rejestracyjny", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nr rejestracyjny", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Przejazd] ([Id przejazdu], [Dzień Miesiąca], [Cel wyjazdu], [Trasa], [Stan licznika przy wyjeździe], [Stan licznika po powrocie], [Ilość przejechanych km.], [Id pracownika], [Id faktury], [Miesiąc], [Rok], [Nr rejestracyjny]) VALUES (@Id_przejazdu, @Dzień_Miesiąca, @Cel_wyjazdu, @Trasa, @Stan_licznika_przy_wyjeździe, @Stan_licznika_po_powrocie, @p1, @Id_pracownika, @Id_faktury, @Miesiąc, @Rok, @Nr_rejestracyjny);
SELECT [Id przejazdu], [Dzień Miesiąca], [Cel wyjazdu], Trasa, [Stan licznika przy wyjeździe], [Stan licznika po powrocie], [Ilość przejechanych km.], [Id pracownika], [Id faktury], Miesiąc, Rok, [Nr rejestracyjny] FROM Przejazd WHERE ([Id przejazdu] = @Id_przejazdu)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_przejazdu", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id przejazdu", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Dzień_Miesiąca", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień Miesiąca", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cel_wyjazdu", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cel wyjazdu", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Trasa", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Trasa", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Stan_licznika_przy_wyjeździe", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stan licznika przy wyjeździe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Stan_licznika_po_powrocie", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stan licznika po powrocie", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ilość przejechanych km.", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_pracownika", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id pracownika", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Miesiąc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nr_rejestracyjny", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nr rejestracyjny", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Przejazd] SET [Id przejazdu] = @Id_przejazdu, [Dzień Miesiąca] = @Dzień_Miesiąca, [Cel wyjazdu] = @Cel_wyjazdu, [Trasa] = @Trasa, [Stan licznika przy wyjeździe] = @Stan_licznika_przy_wyjeździe, [Stan licznika po powrocie] = @Stan_licznika_po_powrocie, [Ilość przejechanych km.] = @p1, [Id pracownika] = @Id_pracownika, [Id faktury] = @Id_faktury, [Miesiąc] = @Miesiąc, [Rok] = @Rok, [Nr rejestracyjny] = @Nr_rejestracyjny WHERE (([Id przejazdu] = @Original_Id_przejazdu) AND ([Dzień Miesiąca] = @Original_Dzień_Miesiąca) AND ([Cel wyjazdu] = @Original_Cel_wyjazdu) AND ([Trasa] = @Original_Trasa) AND ([Stan licznika przy wyjeździe] = @Original_Stan_licznika_przy_wyjeździe) AND ([Stan licznika po powrocie] = @Original_Stan_licznika_po_powrocie) AND ([Ilość przejechanych km.] = @p2) AND ([Id pracownika] = @Original_Id_pracownika) AND ((@IsNull_Id_faktury = 1 AND [Id faktury] IS NULL) OR ([Id faktury] = @Original_Id_faktury)) AND ([Miesiąc] = @Original_Miesiąc) AND ([Rok] = @Original_Rok) AND ([Nr rejestracyjny] = @Original_Nr_rejestracyjny));
SELECT [Id przejazdu], [Dzień Miesiąca], [Cel wyjazdu], Trasa, [Stan licznika przy wyjeździe], [Stan licznika po powrocie], [Ilość przejechanych km.], [Id pracownika], [Id faktury], Miesiąc, Rok, [Nr rejestracyjny] FROM Przejazd WHERE ([Id przejazdu] = @Id_przejazdu)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_przejazdu", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id przejazdu", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Dzień_Miesiąca", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień Miesiąca", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cel_wyjazdu", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cel wyjazdu", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Trasa", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Trasa", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Stan_licznika_przy_wyjeździe", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stan licznika przy wyjeździe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Stan_licznika_po_powrocie", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stan licznika po powrocie", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ilość przejechanych km.", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_pracownika", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id pracownika", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Miesiąc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nr_rejestracyjny", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nr rejestracyjny", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_przejazdu", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id przejazdu", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Dzień_Miesiąca", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień Miesiąca", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Cel_wyjazdu", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cel wyjazdu", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Trasa", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Trasa", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Stan_licznika_przy_wyjeździe", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stan licznika przy wyjeździe", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Stan_licznika_po_powrocie", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stan licznika po powrocie", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ilość przejechanych km.", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_pracownika", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id pracownika", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_faktury", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id faktury", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Miesiąc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiąc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nr_rejestracyjny", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nr rejestracyjny", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RozliczenieSamochodów.Properties.Settings.Default.RozliczenieSamochodówConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Id przejazdu], [Dzień Miesiąca], [Cel wyjazdu], Trasa, [Stan licznika prz" +
                "y wyjeździe], [Stan licznika po powrocie], [Ilość przejechanych km.], [Id pracow" +
                "nika], [Id faktury], Miesiąc, Rok, [Nr rejestracyjny] FROM dbo.Przejazd";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RozliczenieSamochodówDataSet.PrzejazdDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RozliczenieSamochodówDataSet.PrzejazdDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RozliczenieSamochodówDataSet.PrzejazdDataTable dataTable = new RozliczenieSamochodówDataSet.PrzejazdDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RozliczenieSamochodówDataSet.PrzejazdDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RozliczenieSamochodówDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Przejazd");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Id_przejazdu, int Original_Dzień_Miesiąca, string Original_Cel_wyjazdu, string Original_Trasa, int Original_Stan_licznika_przy_wyjeździe, int Original_Stan_licznika_po_powrocie, int p2, int Original_Id_pracownika, global::System.Nullable<int> Original_Id_faktury, int Original_Miesiąc, int Original_Rok, string Original_Nr_rejestracyjny) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Id_przejazdu));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_Dzień_Miesiąca));
            if ((Original_Cel_wyjazdu == null)) {
                throw new global::System.ArgumentNullException("Original_Cel_wyjazdu");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Cel_wyjazdu));
            }
            if ((Original_Trasa == null)) {
                throw new global::System.ArgumentNullException("Original_Trasa");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Trasa));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_Stan_licznika_przy_wyjeździe));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_Stan_licznika_po_powrocie));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_Id_pracownika));
            if ((Original_Id_faktury.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_Id_faktury.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_Miesiąc));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_Rok));
            if ((Original_Nr_rejestracyjny == null)) {
                throw new global::System.ArgumentNullException("Original_Nr_rejestracyjny");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_Nr_rejestracyjny));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Id_przejazdu, int Dzień_Miesiąca, string Cel_wyjazdu, string Trasa, int Stan_licznika_przy_wyjeździe, int Stan_licznika_po_powrocie, int p1, int Id_pracownika, global::System.Nullable<int> Id_faktury, int Miesiąc, int Rok, string Nr_rejestracyjny) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Id_przejazdu));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Dzień_Miesiąca));
            if ((Cel_wyjazdu == null)) {
                throw new global::System.ArgumentNullException("Cel_wyjazdu");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Cel_wyjazdu));
            }
            if ((Trasa == null)) {
                throw new global::System.ArgumentNullException("Trasa");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Trasa));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Stan_licznika_przy_wyjeździe));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Stan_licznika_po_powrocie));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(p1));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(Id_pracownika));
            if ((Id_faktury.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(Id_faktury.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(Miesiąc));
            this.Adapter.InsertCommand.Parameters[10].Value = ((int)(Rok));
            if ((Nr_rejestracyjny == null)) {
                throw new global::System.ArgumentNullException("Nr_rejestracyjny");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Nr_rejestracyjny));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int Id_przejazdu, 
                    int Dzień_Miesiąca, 
                    string Cel_wyjazdu, 
                    string Trasa, 
                    int Stan_licznika_przy_wyjeździe, 
                    int Stan_licznika_po_powrocie, 
                    int p1, 
                    int Id_pracownika, 
                    global::System.Nullable<int> Id_faktury, 
                    int Miesiąc, 
                    int Rok, 
                    string Nr_rejestracyjny, 
                    int Original_Id_przejazdu, 
                    int Original_Dzień_Miesiąca, 
                    string Original_Cel_wyjazdu, 
                    string Original_Trasa, 
                    int Original_Stan_licznika_przy_wyjeździe, 
                    int Original_Stan_licznika_po_powrocie, 
                    int p2, 
                    int Original_Id_pracownika, 
                    global::System.Nullable<int> Original_Id_faktury, 
                    int Original_Miesiąc, 
                    int Original_Rok, 
                    string Original_Nr_rejestracyjny) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Id_przejazdu));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Dzień_Miesiąca));
            if ((Cel_wyjazdu == null)) {
                throw new global::System.ArgumentNullException("Cel_wyjazdu");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Cel_wyjazdu));
            }
            if ((Trasa == null)) {
                throw new global::System.ArgumentNullException("Trasa");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Trasa));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Stan_licznika_przy_wyjeździe));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Stan_licznika_po_powrocie));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(p1));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Id_pracownika));
            if ((Id_faktury.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Id_faktury.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Miesiąc));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Rok));
            if ((Nr_rejestracyjny == null)) {
                throw new global::System.ArgumentNullException("Nr_rejestracyjny");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Nr_rejestracyjny));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_Id_przejazdu));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_Dzień_Miesiąca));
            if ((Original_Cel_wyjazdu == null)) {
                throw new global::System.ArgumentNullException("Original_Cel_wyjazdu");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_Cel_wyjazdu));
            }
            if ((Original_Trasa == null)) {
                throw new global::System.ArgumentNullException("Original_Trasa");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Trasa));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_Stan_licznika_przy_wyjeździe));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_Stan_licznika_po_powrocie));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(p2));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_Id_pracownika));
            if ((Original_Id_faktury.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_Id_faktury.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_Miesiąc));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_Rok));
            if ((Original_Nr_rejestracyjny == null)) {
                throw new global::System.ArgumentNullException("Original_Nr_rejestracyjny");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_Nr_rejestracyjny));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int Dzień_Miesiąca, 
                    string Cel_wyjazdu, 
                    string Trasa, 
                    int Stan_licznika_przy_wyjeździe, 
                    int Stan_licznika_po_powrocie, 
                    int p1, 
                    int Id_pracownika, 
                    global::System.Nullable<int> Id_faktury, 
                    int Miesiąc, 
                    int Rok, 
                    string Nr_rejestracyjny, 
                    int Original_Id_przejazdu, 
                    int Original_Dzień_Miesiąca, 
                    string Original_Cel_wyjazdu, 
                    string Original_Trasa, 
                    int Original_Stan_licznika_przy_wyjeździe, 
                    int Original_Stan_licznika_po_powrocie, 
                    int p2, 
                    int Original_Id_pracownika, 
                    global::System.Nullable<int> Original_Id_faktury, 
                    int Original_Miesiąc, 
                    int Original_Rok, 
                    string Original_Nr_rejestracyjny) {
            return this.Update(Original_Id_przejazdu, Dzień_Miesiąca, Cel_wyjazdu, Trasa, Stan_licznika_przy_wyjeździe, Stan_licznika_po_powrocie, p1, Id_pracownika, Id_faktury, Miesiąc, Rok, Nr_rejestracyjny, Original_Id_przejazdu, Original_Dzień_Miesiąca, Original_Cel_wyjazdu, Original_Trasa, Original_Stan_licznika_przy_wyjeździe, Original_Stan_licznika_po_powrocie, p2, Original_Id_pracownika, Original_Id_faktury, Original_Miesiąc, Original_Rok, Original_Nr_rejestracyjny);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SamochodyTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public SamochodyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Samochody";
            tableMapping.ColumnMappings.Add("Nr rejestracyjny", "Nr rejestracyjny");
            tableMapping.ColumnMappings.Add("Typ", "Typ");
            tableMapping.ColumnMappings.Add("Marka", "Marka");
            tableMapping.ColumnMappings.Add("Model", "Model");
            tableMapping.ColumnMappings.Add("Własność", "Własność");
            tableMapping.ColumnMappings.Add("Paliwo", "Paliwo");
            tableMapping.ColumnMappings.Add("Pojemność", "Pojemność");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Samochody] WHERE (([Nr rejestracyjny] = @Original_Nr_rejestracyjny) AND ([Typ] = @Original_Typ) AND ([Marka] = @Original_Marka) AND ([Model] = @Original_Model) AND ([Własność] = @Original_Własność) AND ([Paliwo] = @Original_Paliwo) AND ([Pojemność] = @Original_Pojemność))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nr_rejestracyjny", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nr rejestracyjny", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Typ", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Typ", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marka", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marka", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Model", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Model", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Własność", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Własność", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Paliwo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Paliwo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pojemność", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pojemność", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Samochody] ([Nr rejestracyjny], [Typ], [Marka], [Model], [Własność], [Paliwo], [Pojemność]) VALUES (@Nr_rejestracyjny, @Typ, @Marka, @Model, @Własność, @Paliwo, @Pojemność);
SELECT [Nr rejestracyjny], Typ, Marka, Model, Własność, Paliwo, Pojemność FROM Samochody WHERE ([Nr rejestracyjny] = @Nr_rejestracyjny)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nr_rejestracyjny", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nr rejestracyjny", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Typ", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Typ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marka", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marka", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Model", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Model", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Własność", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Własność", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Paliwo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Paliwo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pojemność", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pojemność", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Samochody] SET [Nr rejestracyjny] = @Nr_rejestracyjny, [Typ] = @Typ, [Marka] = @Marka, [Model] = @Model, [Własność] = @Własność, [Paliwo] = @Paliwo, [Pojemność] = @Pojemność WHERE (([Nr rejestracyjny] = @Original_Nr_rejestracyjny) AND ([Typ] = @Original_Typ) AND ([Marka] = @Original_Marka) AND ([Model] = @Original_Model) AND ([Własność] = @Original_Własność) AND ([Paliwo] = @Original_Paliwo) AND ([Pojemność] = @Original_Pojemność));
SELECT [Nr rejestracyjny], Typ, Marka, Model, Własność, Paliwo, Pojemność FROM Samochody WHERE ([Nr rejestracyjny] = @Nr_rejestracyjny)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nr_rejestracyjny", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nr rejestracyjny", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Typ", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Typ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marka", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marka", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Model", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Model", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Własność", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Własność", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Paliwo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Paliwo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pojemność", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pojemność", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nr_rejestracyjny", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nr rejestracyjny", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Typ", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Typ", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marka", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marka", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Model", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Model", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Własność", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Własność", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Paliwo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Paliwo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pojemność", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pojemność", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RozliczenieSamochodów.Properties.Settings.Default.RozliczenieSamochodówConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Nr rejestracyjny], Typ, Marka, Model, Własność, Paliwo, Pojemność FROM db" +
                "o.Samochody";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RozliczenieSamochodówDataSet.SamochodyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RozliczenieSamochodówDataSet.SamochodyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RozliczenieSamochodówDataSet.SamochodyDataTable dataTable = new RozliczenieSamochodówDataSet.SamochodyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RozliczenieSamochodówDataSet.SamochodyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RozliczenieSamochodówDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Samochody");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_Nr_rejestracyjny, string Original_Typ, string Original_Marka, string Original_Model, string Original_Własność, string Original_Paliwo, decimal Original_Pojemność) {
            if ((Original_Nr_rejestracyjny == null)) {
                throw new global::System.ArgumentNullException("Original_Nr_rejestracyjny");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Nr_rejestracyjny));
            }
            if ((Original_Typ == null)) {
                throw new global::System.ArgumentNullException("Original_Typ");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Typ));
            }
            if ((Original_Marka == null)) {
                throw new global::System.ArgumentNullException("Original_Marka");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Marka));
            }
            if ((Original_Model == null)) {
                throw new global::System.ArgumentNullException("Original_Model");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Model));
            }
            if ((Original_Własność == null)) {
                throw new global::System.ArgumentNullException("Original_Własność");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Własność));
            }
            if ((Original_Paliwo == null)) {
                throw new global::System.ArgumentNullException("Original_Paliwo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Paliwo));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_Pojemność));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Nr_rejestracyjny, string Typ, string Marka, string Model, string Własność, string Paliwo, decimal Pojemność) {
            if ((Nr_rejestracyjny == null)) {
                throw new global::System.ArgumentNullException("Nr_rejestracyjny");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Nr_rejestracyjny));
            }
            if ((Typ == null)) {
                throw new global::System.ArgumentNullException("Typ");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Typ));
            }
            if ((Marka == null)) {
                throw new global::System.ArgumentNullException("Marka");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Marka));
            }
            if ((Model == null)) {
                throw new global::System.ArgumentNullException("Model");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Model));
            }
            if ((Własność == null)) {
                throw new global::System.ArgumentNullException("Własność");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Własność));
            }
            if ((Paliwo == null)) {
                throw new global::System.ArgumentNullException("Paliwo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Paliwo));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(Pojemność));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Nr_rejestracyjny, string Typ, string Marka, string Model, string Własność, string Paliwo, decimal Pojemność, string Original_Nr_rejestracyjny, string Original_Typ, string Original_Marka, string Original_Model, string Original_Własność, string Original_Paliwo, decimal Original_Pojemność) {
            if ((Nr_rejestracyjny == null)) {
                throw new global::System.ArgumentNullException("Nr_rejestracyjny");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Nr_rejestracyjny));
            }
            if ((Typ == null)) {
                throw new global::System.ArgumentNullException("Typ");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Typ));
            }
            if ((Marka == null)) {
                throw new global::System.ArgumentNullException("Marka");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Marka));
            }
            if ((Model == null)) {
                throw new global::System.ArgumentNullException("Model");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Model));
            }
            if ((Własność == null)) {
                throw new global::System.ArgumentNullException("Własność");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Własność));
            }
            if ((Paliwo == null)) {
                throw new global::System.ArgumentNullException("Paliwo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Paliwo));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Pojemność));
            if ((Original_Nr_rejestracyjny == null)) {
                throw new global::System.ArgumentNullException("Original_Nr_rejestracyjny");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Nr_rejestracyjny));
            }
            if ((Original_Typ == null)) {
                throw new global::System.ArgumentNullException("Original_Typ");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Typ));
            }
            if ((Original_Marka == null)) {
                throw new global::System.ArgumentNullException("Original_Marka");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Marka));
            }
            if ((Original_Model == null)) {
                throw new global::System.ArgumentNullException("Original_Model");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Model));
            }
            if ((Original_Własność == null)) {
                throw new global::System.ArgumentNullException("Original_Własność");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Własność));
            }
            if ((Original_Paliwo == null)) {
                throw new global::System.ArgumentNullException("Original_Paliwo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Paliwo));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(Original_Pojemność));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Typ, string Marka, string Model, string Własność, string Paliwo, decimal Pojemność, string Original_Nr_rejestracyjny, string Original_Typ, string Original_Marka, string Original_Model, string Original_Własność, string Original_Paliwo, decimal Original_Pojemność) {
            return this.Update(Original_Nr_rejestracyjny, Typ, Marka, Model, Własność, Paliwo, Pojemność, Original_Nr_rejestracyjny, Original_Typ, Original_Marka, Original_Model, Original_Własność, Original_Paliwo, Original_Pojemność);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UżytkownicyTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public UżytkownicyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Użytkownicy";
            tableMapping.ColumnMappings.Add("Id pracownika", "Id pracownika");
            tableMapping.ColumnMappings.Add("Imie", "Imie");
            tableMapping.ColumnMappings.Add("Nazwisko", "Nazwisko");
            tableMapping.ColumnMappings.Add("Dzień urodzenia", "Dzień urodzenia");
            tableMapping.ColumnMappings.Add("Miesiac urodzenia", "Miesiac urodzenia");
            tableMapping.ColumnMappings.Add("Rok urodzenia", "Rok urodzenia");
            tableMapping.ColumnMappings.Add("Stanowisko", "Stanowisko");
            tableMapping.ColumnMappings.Add("Rodzaj uprawnień", "Rodzaj uprawnień");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Użytkownicy] WHERE (([Id pracownika] = @Original_Id_pracownika) AND ([Imie] = @Original_Imie) AND ([Nazwisko] = @Original_Nazwisko) AND ([Dzień urodzenia] = @Original_Dzień_urodzenia) AND ([Miesiac urodzenia] = @Original_Miesiac_urodzenia) AND ([Rok urodzenia] = @Original_Rok_urodzenia) AND ((@IsNull_Stanowisko = 1 AND [Stanowisko] IS NULL) OR ([Stanowisko] = @Original_Stanowisko)) AND ([Rodzaj uprawnień] = @Original_Rodzaj_uprawnień))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_pracownika", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id pracownika", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Imie", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Imie", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nazwisko", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nazwisko", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Dzień_urodzenia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień urodzenia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Miesiac_urodzenia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiac urodzenia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rok_urodzenia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok urodzenia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Stanowisko", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stanowisko", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Stanowisko", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stanowisko", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rodzaj_uprawnień", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rodzaj uprawnień", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Użytkownicy] ([Id pracownika], [Imie], [Nazwisko], [Dzień urodzenia], [Miesiac urodzenia], [Rok urodzenia], [Stanowisko], [Rodzaj uprawnień]) VALUES (@Id_pracownika, @Imie, @Nazwisko, @Dzień_urodzenia, @Miesiac_urodzenia, @Rok_urodzenia, @Stanowisko, @Rodzaj_uprawnień);
SELECT [Id pracownika], Imie, Nazwisko, [Dzień urodzenia], [Miesiac urodzenia], [Rok urodzenia], Stanowisko, [Rodzaj uprawnień] FROM Użytkownicy WHERE ([Id pracownika] = @Id_pracownika)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_pracownika", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id pracownika", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Imie", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Imie", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nazwisko", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nazwisko", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Dzień_urodzenia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień urodzenia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Miesiac_urodzenia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiac urodzenia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rok_urodzenia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok urodzenia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Stanowisko", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stanowisko", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rodzaj_uprawnień", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rodzaj uprawnień", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Użytkownicy] SET [Id pracownika] = @Id_pracownika, [Imie] = @Imie, [Nazwisko] = @Nazwisko, [Dzień urodzenia] = @Dzień_urodzenia, [Miesiac urodzenia] = @Miesiac_urodzenia, [Rok urodzenia] = @Rok_urodzenia, [Stanowisko] = @Stanowisko, [Rodzaj uprawnień] = @Rodzaj_uprawnień WHERE (([Id pracownika] = @Original_Id_pracownika) AND ([Imie] = @Original_Imie) AND ([Nazwisko] = @Original_Nazwisko) AND ([Dzień urodzenia] = @Original_Dzień_urodzenia) AND ([Miesiac urodzenia] = @Original_Miesiac_urodzenia) AND ([Rok urodzenia] = @Original_Rok_urodzenia) AND ((@IsNull_Stanowisko = 1 AND [Stanowisko] IS NULL) OR ([Stanowisko] = @Original_Stanowisko)) AND ([Rodzaj uprawnień] = @Original_Rodzaj_uprawnień));
SELECT [Id pracownika], Imie, Nazwisko, [Dzień urodzenia], [Miesiac urodzenia], [Rok urodzenia], Stanowisko, [Rodzaj uprawnień] FROM Użytkownicy WHERE ([Id pracownika] = @Id_pracownika)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id_pracownika", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id pracownika", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Imie", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Imie", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nazwisko", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nazwisko", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Dzień_urodzenia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień urodzenia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Miesiac_urodzenia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiac urodzenia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rok_urodzenia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok urodzenia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Stanowisko", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stanowisko", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rodzaj_uprawnień", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rodzaj uprawnień", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id_pracownika", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id pracownika", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Imie", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Imie", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nazwisko", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nazwisko", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Dzień_urodzenia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dzień urodzenia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Miesiac_urodzenia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Miesiac urodzenia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rok_urodzenia", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rok urodzenia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Stanowisko", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stanowisko", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Stanowisko", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stanowisko", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rodzaj_uprawnień", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rodzaj uprawnień", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RozliczenieSamochodów.Properties.Settings.Default.RozliczenieSamochodówConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Id pracownika], Imie, Nazwisko, [Dzień urodzenia], [Miesiac urodzenia], [" +
                "Rok urodzenia], Stanowisko, [Rodzaj uprawnień] FROM dbo.Użytkownicy";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RozliczenieSamochodówDataSet.UżytkownicyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RozliczenieSamochodówDataSet.UżytkownicyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RozliczenieSamochodówDataSet.UżytkownicyDataTable dataTable = new RozliczenieSamochodówDataSet.UżytkownicyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RozliczenieSamochodówDataSet.UżytkownicyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RozliczenieSamochodówDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Użytkownicy");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Id_pracownika, string Original_Imie, string Original_Nazwisko, int Original_Dzień_urodzenia, int Original_Miesiac_urodzenia, int Original_Rok_urodzenia, string Original_Stanowisko, string Original_Rodzaj_uprawnień) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Id_pracownika));
            if ((Original_Imie == null)) {
                throw new global::System.ArgumentNullException("Original_Imie");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Imie));
            }
            if ((Original_Nazwisko == null)) {
                throw new global::System.ArgumentNullException("Original_Nazwisko");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Nazwisko));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_Dzień_urodzenia));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_Miesiac_urodzenia));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_Rok_urodzenia));
            if ((Original_Stanowisko == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Stanowisko));
            }
            if ((Original_Rodzaj_uprawnień == null)) {
                throw new global::System.ArgumentNullException("Original_Rodzaj_uprawnień");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Rodzaj_uprawnień));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Id_pracownika, string Imie, string Nazwisko, int Dzień_urodzenia, int Miesiac_urodzenia, int Rok_urodzenia, string Stanowisko, string Rodzaj_uprawnień) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Id_pracownika));
            if ((Imie == null)) {
                throw new global::System.ArgumentNullException("Imie");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Imie));
            }
            if ((Nazwisko == null)) {
                throw new global::System.ArgumentNullException("Nazwisko");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Nazwisko));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Dzień_urodzenia));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Miesiac_urodzenia));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Rok_urodzenia));
            if ((Stanowisko == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Stanowisko));
            }
            if ((Rodzaj_uprawnień == null)) {
                throw new global::System.ArgumentNullException("Rodzaj_uprawnień");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Rodzaj_uprawnień));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int Id_pracownika, 
                    string Imie, 
                    string Nazwisko, 
                    int Dzień_urodzenia, 
                    int Miesiac_urodzenia, 
                    int Rok_urodzenia, 
                    string Stanowisko, 
                    string Rodzaj_uprawnień, 
                    int Original_Id_pracownika, 
                    string Original_Imie, 
                    string Original_Nazwisko, 
                    int Original_Dzień_urodzenia, 
                    int Original_Miesiac_urodzenia, 
                    int Original_Rok_urodzenia, 
                    string Original_Stanowisko, 
                    string Original_Rodzaj_uprawnień) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Id_pracownika));
            if ((Imie == null)) {
                throw new global::System.ArgumentNullException("Imie");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Imie));
            }
            if ((Nazwisko == null)) {
                throw new global::System.ArgumentNullException("Nazwisko");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Nazwisko));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Dzień_urodzenia));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Miesiac_urodzenia));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Rok_urodzenia));
            if ((Stanowisko == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Stanowisko));
            }
            if ((Rodzaj_uprawnień == null)) {
                throw new global::System.ArgumentNullException("Rodzaj_uprawnień");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Rodzaj_uprawnień));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_Id_pracownika));
            if ((Original_Imie == null)) {
                throw new global::System.ArgumentNullException("Original_Imie");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Imie));
            }
            if ((Original_Nazwisko == null)) {
                throw new global::System.ArgumentNullException("Original_Nazwisko");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Nazwisko));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_Dzień_urodzenia));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_Miesiac_urodzenia));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_Rok_urodzenia));
            if ((Original_Stanowisko == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Stanowisko));
            }
            if ((Original_Rodzaj_uprawnień == null)) {
                throw new global::System.ArgumentNullException("Original_Rodzaj_uprawnień");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_Rodzaj_uprawnień));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Imie, string Nazwisko, int Dzień_urodzenia, int Miesiac_urodzenia, int Rok_urodzenia, string Stanowisko, string Rodzaj_uprawnień, int Original_Id_pracownika, string Original_Imie, string Original_Nazwisko, int Original_Dzień_urodzenia, int Original_Miesiac_urodzenia, int Original_Rok_urodzenia, string Original_Stanowisko, string Original_Rodzaj_uprawnień) {
            return this.Update(Original_Id_pracownika, Imie, Nazwisko, Dzień_urodzenia, Miesiac_urodzenia, Rok_urodzenia, Stanowisko, Rodzaj_uprawnień, Original_Id_pracownika, Original_Imie, Original_Nazwisko, Original_Dzień_urodzenia, Original_Miesiac_urodzenia, Original_Rok_urodzenia, Original_Stanowisko, Original_Rodzaj_uprawnień);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private FakturaTableAdapter _fakturaTableAdapter;
        
        private Miesięczna_Karta_DrogowaTableAdapter _miesięczna_Karta_DrogowaTableAdapter;
        
        private Pozycje_fakturyTableAdapter _pozycje_fakturyTableAdapter;
        
        private PrzejazdTableAdapter _przejazdTableAdapter;
        
        private SamochodyTableAdapter _samochodyTableAdapter;
        
        private UżytkownicyTableAdapter _użytkownicyTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public FakturaTableAdapter FakturaTableAdapter {
            get {
                return this._fakturaTableAdapter;
            }
            set {
                this._fakturaTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Miesięczna_Karta_DrogowaTableAdapter Miesięczna_Karta_DrogowaTableAdapter {
            get {
                return this._miesięczna_Karta_DrogowaTableAdapter;
            }
            set {
                this._miesięczna_Karta_DrogowaTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Pozycje_fakturyTableAdapter Pozycje_fakturyTableAdapter {
            get {
                return this._pozycje_fakturyTableAdapter;
            }
            set {
                this._pozycje_fakturyTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public PrzejazdTableAdapter PrzejazdTableAdapter {
            get {
                return this._przejazdTableAdapter;
            }
            set {
                this._przejazdTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public SamochodyTableAdapter SamochodyTableAdapter {
            get {
                return this._samochodyTableAdapter;
            }
            set {
                this._samochodyTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public UżytkownicyTableAdapter UżytkownicyTableAdapter {
            get {
                return this._użytkownicyTableAdapter;
            }
            set {
                this._użytkownicyTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._fakturaTableAdapter != null) 
                            && (this._fakturaTableAdapter.Connection != null))) {
                    return this._fakturaTableAdapter.Connection;
                }
                if (((this._miesięczna_Karta_DrogowaTableAdapter != null) 
                            && (this._miesięczna_Karta_DrogowaTableAdapter.Connection != null))) {
                    return this._miesięczna_Karta_DrogowaTableAdapter.Connection;
                }
                if (((this._pozycje_fakturyTableAdapter != null) 
                            && (this._pozycje_fakturyTableAdapter.Connection != null))) {
                    return this._pozycje_fakturyTableAdapter.Connection;
                }
                if (((this._przejazdTableAdapter != null) 
                            && (this._przejazdTableAdapter.Connection != null))) {
                    return this._przejazdTableAdapter.Connection;
                }
                if (((this._samochodyTableAdapter != null) 
                            && (this._samochodyTableAdapter.Connection != null))) {
                    return this._samochodyTableAdapter.Connection;
                }
                if (((this._użytkownicyTableAdapter != null) 
                            && (this._użytkownicyTableAdapter.Connection != null))) {
                    return this._użytkownicyTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._fakturaTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._miesięczna_Karta_DrogowaTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pozycje_fakturyTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._przejazdTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._samochodyTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._użytkownicyTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateUpdatedRows(RozliczenieSamochodówDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._samochodyTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Samochody.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._samochodyTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fakturaTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Faktura.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fakturaTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._miesięczna_Karta_DrogowaTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Miesięczna_Karta_Drogowa.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._miesięczna_Karta_DrogowaTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._użytkownicyTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Użytkownicy.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._użytkownicyTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pozycje_fakturyTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Pozycje_faktury.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pozycje_fakturyTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._przejazdTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Przejazd.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._przejazdTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateInsertedRows(RozliczenieSamochodówDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._samochodyTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Samochody.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._samochodyTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fakturaTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Faktura.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fakturaTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._miesięczna_Karta_DrogowaTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Miesięczna_Karta_Drogowa.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._miesięczna_Karta_DrogowaTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._użytkownicyTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Użytkownicy.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._użytkownicyTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pozycje_fakturyTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Pozycje_faktury.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pozycje_fakturyTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._przejazdTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Przejazd.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._przejazdTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateDeletedRows(RozliczenieSamochodówDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._przejazdTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Przejazd.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._przejazdTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pozycje_fakturyTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Pozycje_faktury.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pozycje_fakturyTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._użytkownicyTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Użytkownicy.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._użytkownicyTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._miesięczna_Karta_DrogowaTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Miesięczna_Karta_Drogowa.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._miesięczna_Karta_DrogowaTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fakturaTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Faktura.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fakturaTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._samochodyTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Samochody.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._samochodyTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public virtual int UpdateAll(RozliczenieSamochodówDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._fakturaTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fakturaTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Dla wszystkich obiektów TableAdapter, którymi zarządza obiekt TableAdapterManager" +
                        ", muszą być używane te same parametry połączenia.");
            }
            if (((this._miesięczna_Karta_DrogowaTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._miesięczna_Karta_DrogowaTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Dla wszystkich obiektów TableAdapter, którymi zarządza obiekt TableAdapterManager" +
                        ", muszą być używane te same parametry połączenia.");
            }
            if (((this._pozycje_fakturyTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pozycje_fakturyTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Dla wszystkich obiektów TableAdapter, którymi zarządza obiekt TableAdapterManager" +
                        ", muszą być używane te same parametry połączenia.");
            }
            if (((this._przejazdTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._przejazdTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Dla wszystkich obiektów TableAdapter, którymi zarządza obiekt TableAdapterManager" +
                        ", muszą być używane te same parametry połączenia.");
            }
            if (((this._samochodyTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._samochodyTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Dla wszystkich obiektów TableAdapter, którymi zarządza obiekt TableAdapterManager" +
                        ", muszą być używane te same parametry połączenia.");
            }
            if (((this._użytkownicyTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._użytkownicyTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Dla wszystkich obiektów TableAdapter, którymi zarządza obiekt TableAdapterManager" +
                        ", muszą być używane te same parametry połączenia.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("Obiekt TableAdapterManager nie zawiera informacji o połączeniu. Ustaw dla każdej " +
                        "właściwości TableAdapter obiektu TableAdapterManager prawidłowe wystąpienie obie" +
                        "ktu TableAdapter.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("Nie można rozpocząć transakcji. Bieżące połączenie danych nie obsługuje transakcj" +
                        "i lub bieżący stan nie pozwala na rozpoczęcie transakcji.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._fakturaTableAdapter != null)) {
                    revertConnections.Add(this._fakturaTableAdapter, this._fakturaTableAdapter.Connection);
                    this._fakturaTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fakturaTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fakturaTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fakturaTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fakturaTableAdapter.Adapter);
                    }
                }
                if ((this._miesięczna_Karta_DrogowaTableAdapter != null)) {
                    revertConnections.Add(this._miesięczna_Karta_DrogowaTableAdapter, this._miesięczna_Karta_DrogowaTableAdapter.Connection);
                    this._miesięczna_Karta_DrogowaTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._miesięczna_Karta_DrogowaTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._miesięczna_Karta_DrogowaTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._miesięczna_Karta_DrogowaTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._miesięczna_Karta_DrogowaTableAdapter.Adapter);
                    }
                }
                if ((this._pozycje_fakturyTableAdapter != null)) {
                    revertConnections.Add(this._pozycje_fakturyTableAdapter, this._pozycje_fakturyTableAdapter.Connection);
                    this._pozycje_fakturyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pozycje_fakturyTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pozycje_fakturyTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pozycje_fakturyTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pozycje_fakturyTableAdapter.Adapter);
                    }
                }
                if ((this._przejazdTableAdapter != null)) {
                    revertConnections.Add(this._przejazdTableAdapter, this._przejazdTableAdapter.Connection);
                    this._przejazdTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._przejazdTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._przejazdTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._przejazdTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._przejazdTableAdapter.Adapter);
                    }
                }
                if ((this._samochodyTableAdapter != null)) {
                    revertConnections.Add(this._samochodyTableAdapter, this._samochodyTableAdapter.Connection);
                    this._samochodyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._samochodyTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._samochodyTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._samochodyTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._samochodyTableAdapter.Adapter);
                    }
                }
                if ((this._użytkownicyTableAdapter != null)) {
                    revertConnections.Add(this._użytkownicyTableAdapter, this._użytkownicyTableAdapter.Connection);
                    this._użytkownicyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._użytkownicyTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._użytkownicyTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._użytkownicyTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._użytkownicyTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._fakturaTableAdapter != null)) {
                    this._fakturaTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fakturaTableAdapter]));
                    this._fakturaTableAdapter.Transaction = null;
                }
                if ((this._miesięczna_Karta_DrogowaTableAdapter != null)) {
                    this._miesięczna_Karta_DrogowaTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._miesięczna_Karta_DrogowaTableAdapter]));
                    this._miesięczna_Karta_DrogowaTableAdapter.Transaction = null;
                }
                if ((this._pozycje_fakturyTableAdapter != null)) {
                    this._pozycje_fakturyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pozycje_fakturyTableAdapter]));
                    this._pozycje_fakturyTableAdapter.Transaction = null;
                }
                if ((this._przejazdTableAdapter != null)) {
                    this._przejazdTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._przejazdTableAdapter]));
                    this._przejazdTableAdapter.Transaction = null;
                }
                if ((this._samochodyTableAdapter != null)) {
                    this._samochodyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._samochodyTableAdapter]));
                    this._samochodyTableAdapter.Transaction = null;
                }
                if ((this._użytkownicyTableAdapter != null)) {
                    this._użytkownicyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._użytkownicyTableAdapter]));
                    this._użytkownicyTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591